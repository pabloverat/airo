Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> encabezamiento var_list func_list cuerpo
Rule 2     program -> encabezamiento var_list cuerpo
Rule 3     program -> encabezamiento func_list cuerpo
Rule 4     program -> encabezamiento cuerpo
Rule 5     calcula_globales -> <empty>
Rule 6     encabezamiento -> PROGRAM ID
Rule 7     context_to_global -> <empty>
Rule 8     cuerpo -> MAIN context_to_global OPPARENTH CLPARENTH OPBRACE estat_list calcula_globales CLBRACE
Rule 9     variable -> VAR ID COLON var_typ
Rule 10    variable -> VAR ID COLON var_typ dims
Rule 11    var_list -> variable var_list
Rule 12    var_list -> variable
Rule 13    func_list -> func func_list
Rule 14    func_list -> func
Rule 15    estat_list -> estat estat_list
Rule 16    estat_list -> estat
Rule 17    param_list -> param COMMA param_list
Rule 18    param_list -> param
Rule 19    save_array_size -> <empty>
Rule 20    dims -> OPBRACKET aritm save_array_size CLBRACKET
Rule 21    dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET
Rule 22    save_global_func -> <empty>
Rule 23    func -> FUNC ID context_to_local OPPARENTH CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE
Rule 24    func -> FUNC ID context_to_local OPPARENTH param_list CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE
Rule 25    context_to_local -> <empty>
Rule 26    ciclo_q1 -> <empty>
Rule 27    ciclo_q2 -> <empty>
Rule 28    ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2
Rule 29    conditional_q1 -> <empty>
Rule 30    conditional_q2 -> <empty>
Rule 31    conditional_q3 -> <empty>
Rule 32    decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2
Rule 33    decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2
Rule 34    save_return_value -> <empty>
Rule 35    func_cont -> var_list estat_list RETURN aritm save_return_value
Rule 36    func_cont -> estat_list RETURN aritm save_return_value
Rule 37    func_cont -> var_list estat_list
Rule 38    func_cont -> estat_list
Rule 39    estat -> asign
Rule 40    estat -> llam_void
Rule 41    estat -> lectura
Rule 42    estat -> escritura
Rule 43    estat -> carga_dt
Rule 44    estat -> decision
Rule 45    estat -> ciclo
Rule 46    carga_dt -> ID ASGNMNT LOAD OPPARENTH ID CLPARENTH
Rule 47    carga_dt -> ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH
Rule 48    param -> ID COLON var_typ
Rule 49    param -> ID COLON var_typ dims
Rule 50    var_typ -> INT
Rule 51    var_typ -> FLOAT
Rule 52    var_typ -> CHAR
Rule 53    var_typ -> BOOL
Rule 54    var_typ -> FRAME
Rule 55    func_typ -> INT
Rule 56    func_typ -> FLOAT
Rule 57    func_typ -> CHAR
Rule 58    func_typ -> BOOL
Rule 59    func_typ -> FRAME
Rule 60    func_typ -> VOID
Rule 61    check_aritm_operation -> <empty>
Rule 62    check_aritm -> <empty>
Rule 63    aritm -> term check_aritm PLUS check_aritm_operation aritm
Rule 64    aritm -> term check_aritm MINUS check_aritm_operation aritm
Rule 65    aritm -> term check_aritm
Rule 66    check_term_operation -> <empty>
Rule 67    check_term -> <empty>
Rule 68    term -> factor check_term TIMES check_term_operation term
Rule 69    term -> factor check_term DIVIDE check_term_operation term
Rule 70    term -> factor check_term
Rule 71    factortype_const_int -> <empty>
Rule 72    factortype_const_float -> <empty>
Rule 73    factor_const -> CONST_INT factortype_const_int
Rule 74    factor_const -> CONST_FLOAT factortype_const_float
Rule 75    factor_var -> ID
Rule 76    factor_var -> ID dims
Rule 77    function_call_q1 -> <empty>
Rule 78    function_call_q2 -> <empty>
Rule 79    factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
Rule 80    factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
Rule 81    check_parenth -> <empty>
Rule 82    factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth
Rule 83    factor -> factor_function_call
Rule 84    factor -> factor_var
Rule 85    factor -> factor_const
Rule 86    relac -> aritm EQUAL aritm
Rule 87    relac -> aritm UNEQUAL aritm
Rule 88    relac -> aritm LESS aritm
Rule 89    relac -> aritm LESSEQ aritm
Rule 90    relac -> aritm GREATER aritm
Rule 91    relac -> aritm GREATEREQ aritm
Rule 92    arg_q1 -> <empty>
Rule 93    arg_q2 -> <empty>
Rule 94    args -> aritm arg_q1 COMMA arg_q2 args
Rule 95    args -> aritm arg_q1
Rule 96    lectura -> READ OPPARENTH CLPARENTH
Rule 97    escritura -> WRITE OPPARENTH aritm CLPARENTH
Rule 98    escritura -> WRITE OPPARENTH CONST_STRING CLPARENTH
Rule 99    llam_void -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
Rule 100   llam_void -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
Rule 101   asign -> ID ASGNMNT lectura
Rule 102   asign -> ID ASGNMNT aritm
Rule 103   asign -> ID ASGNMNT CONST_STRING
Rule 104   asign -> ID dims ASGNMNT lectura
Rule 105   asign -> ID dims ASGNMNT aritm
Rule 106   asign -> ID dims ASGNMNT CONST_STRING

Terminals, with rules where they appear

ASGNMNT              : 46 47 101 102 103 104 105 106
BOOL                 : 53 58
CHAR                 : 52 57
CLBRACE              : 8 23 24 28 32 33 33
CLBRACKET            : 20 21 21
CLPARENTH            : 8 23 24 28 32 33 46 47 79 80 82 96 97 98 99 100
COLON                : 9 10 23 24 48 49
COMMA                : 17 94
CONST_FLOAT          : 74
CONST_INT            : 73
CONST_STRING         : 47 98 103 106
DIVIDE               : 69
ELSE                 : 33
EQUAL                : 86
FLOAT                : 51 56
FRAME                : 54 59
FUNC                 : 23 24
GREATER              : 90
GREATEREQ            : 91
ID                   : 6 9 10 23 24 46 46 47 48 49 75 76 79 80 99 100 101 102 103 104 105 106
INT                  : 50 55
LESS                 : 88
LESSEQ               : 89
LOAD                 : 46 47
MAIN                 : 8
MINUS                : 64
OPBRACE              : 8 23 24 28 32 33 33
OPBRACKET            : 20 21 21
OPPARENTH            : 8 23 24 28 32 33 46 47 79 80 82 96 97 98 99 100
PLUS                 : 63
PROGRAM              : 6
READ                 : 96
RETURN               : 35 36
THEN                 : 28 32 33
TIMES                : 68
UNEQUAL              : 87
VAR                  : 9 10
VOID                 : 60
WHEN                 : 32 33
WHILE                : 28
WRITE                : 97 98
error                : 

Nonterminals, with rules where they appear

arg_q1               : 94 95
arg_q2               : 94
args                 : 80 94 100
aritm                : 20 21 21 35 36 63 64 82 86 86 87 87 88 88 89 89 90 90 91 91 94 95 97 102 105
asign                : 39
calcula_globales     : 8
carga_dt             : 43
check_aritm          : 63 64 65
check_aritm_operation : 63 64
check_parenth        : 82 82
check_term           : 68 69 70
check_term_operation : 68 69
ciclo                : 45
ciclo_q1             : 28
ciclo_q2             : 28
conditional_q1       : 28 32 33
conditional_q2       : 32 33
conditional_q3       : 33
context_to_global    : 8
context_to_local     : 23 24
cuerpo               : 1 2 3 4
decision             : 44
dims                 : 10 49 76 104 105 106
encabezamiento       : 1 2 3 4
escritura            : 42
estat                : 15 16
estat_list           : 8 15 28 32 33 33 35 36 37 38
factor               : 68 69 70
factor_const         : 85
factor_function_call : 83
factor_var           : 84
factortype_const_float : 74
factortype_const_int : 73
func                 : 13 14
func_cont            : 23 24
func_list            : 1 3 13
func_typ             : 23 24
function_call_q1     : 79 80 99 100
function_call_q2     : 79 80 99 100
lectura              : 41 101 104
llam_void            : 40
param                : 17 18
param_list           : 17 24
program              : 0
relac                : 28 32 33
save_array_size      : 20 21 21
save_global_func     : 23 24
save_return_value    : 35 36
term                 : 63 64 65 68 69
var_list             : 1 2 11 35 37
var_typ              : 9 10 48 49
variable             : 11 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . encabezamiento var_list func_list cuerpo
    (2) program -> . encabezamiento var_list cuerpo
    (3) program -> . encabezamiento func_list cuerpo
    (4) program -> . encabezamiento cuerpo
    (6) encabezamiento -> . PROGRAM ID

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    encabezamiento                 shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> encabezamiento . var_list func_list cuerpo
    (2) program -> encabezamiento . var_list cuerpo
    (3) program -> encabezamiento . func_list cuerpo
    (4) program -> encabezamiento . cuerpo
    (11) var_list -> . variable var_list
    (12) var_list -> . variable
    (13) func_list -> . func func_list
    (14) func_list -> . func
    (8) cuerpo -> . MAIN context_to_global OPPARENTH CLPARENTH OPBRACE estat_list calcula_globales CLBRACE
    (9) variable -> . VAR ID COLON var_typ
    (10) variable -> . VAR ID COLON var_typ dims
    (23) func -> . FUNC ID context_to_local OPPARENTH CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE
    (24) func -> . FUNC ID context_to_local OPPARENTH param_list CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE

    MAIN            shift and go to state 9
    VAR             shift and go to state 10
    FUNC            shift and go to state 11

    var_list                       shift and go to state 4
    func_list                      shift and go to state 5
    cuerpo                         shift and go to state 6
    variable                       shift and go to state 7
    func                           shift and go to state 8

state 3

    (6) encabezamiento -> PROGRAM . ID

    ID              shift and go to state 12


state 4

    (1) program -> encabezamiento var_list . func_list cuerpo
    (2) program -> encabezamiento var_list . cuerpo
    (13) func_list -> . func func_list
    (14) func_list -> . func
    (8) cuerpo -> . MAIN context_to_global OPPARENTH CLPARENTH OPBRACE estat_list calcula_globales CLBRACE
    (23) func -> . FUNC ID context_to_local OPPARENTH CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE
    (24) func -> . FUNC ID context_to_local OPPARENTH param_list CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE

    MAIN            shift and go to state 9
    FUNC            shift and go to state 11

    func_list                      shift and go to state 13
    cuerpo                         shift and go to state 14
    func                           shift and go to state 8

state 5

    (3) program -> encabezamiento func_list . cuerpo
    (8) cuerpo -> . MAIN context_to_global OPPARENTH CLPARENTH OPBRACE estat_list calcula_globales CLBRACE

    MAIN            shift and go to state 9

    cuerpo                         shift and go to state 15

state 6

    (4) program -> encabezamiento cuerpo .

    $end            reduce using rule 4 (program -> encabezamiento cuerpo .)


state 7

    (11) var_list -> variable . var_list
    (12) var_list -> variable .
    (11) var_list -> . variable var_list
    (12) var_list -> . variable
    (9) variable -> . VAR ID COLON var_typ
    (10) variable -> . VAR ID COLON var_typ dims

    MAIN            reduce using rule 12 (var_list -> variable .)
    FUNC            reduce using rule 12 (var_list -> variable .)
    ID              reduce using rule 12 (var_list -> variable .)
    READ            reduce using rule 12 (var_list -> variable .)
    WRITE           reduce using rule 12 (var_list -> variable .)
    WHEN            reduce using rule 12 (var_list -> variable .)
    WHILE           reduce using rule 12 (var_list -> variable .)
    VAR             shift and go to state 10

    variable                       shift and go to state 7
    var_list                       shift and go to state 16

state 8

    (13) func_list -> func . func_list
    (14) func_list -> func .
    (13) func_list -> . func func_list
    (14) func_list -> . func
    (23) func -> . FUNC ID context_to_local OPPARENTH CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE
    (24) func -> . FUNC ID context_to_local OPPARENTH param_list CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE

    MAIN            reduce using rule 14 (func_list -> func .)
    FUNC            shift and go to state 11

    func                           shift and go to state 8
    func_list                      shift and go to state 17

state 9

    (8) cuerpo -> MAIN . context_to_global OPPARENTH CLPARENTH OPBRACE estat_list calcula_globales CLBRACE
    (7) context_to_global -> .

    OPPARENTH       reduce using rule 7 (context_to_global -> .)

    context_to_global              shift and go to state 18

state 10

    (9) variable -> VAR . ID COLON var_typ
    (10) variable -> VAR . ID COLON var_typ dims

    ID              shift and go to state 19


state 11

    (23) func -> FUNC . ID context_to_local OPPARENTH CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE
    (24) func -> FUNC . ID context_to_local OPPARENTH param_list CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE

    ID              shift and go to state 20


state 12

    (6) encabezamiento -> PROGRAM ID .

    MAIN            reduce using rule 6 (encabezamiento -> PROGRAM ID .)
    VAR             reduce using rule 6 (encabezamiento -> PROGRAM ID .)
    FUNC            reduce using rule 6 (encabezamiento -> PROGRAM ID .)


state 13

    (1) program -> encabezamiento var_list func_list . cuerpo
    (8) cuerpo -> . MAIN context_to_global OPPARENTH CLPARENTH OPBRACE estat_list calcula_globales CLBRACE

    MAIN            shift and go to state 9

    cuerpo                         shift and go to state 21

state 14

    (2) program -> encabezamiento var_list cuerpo .

    $end            reduce using rule 2 (program -> encabezamiento var_list cuerpo .)


state 15

    (3) program -> encabezamiento func_list cuerpo .

    $end            reduce using rule 3 (program -> encabezamiento func_list cuerpo .)


state 16

    (11) var_list -> variable var_list .

    MAIN            reduce using rule 11 (var_list -> variable var_list .)
    FUNC            reduce using rule 11 (var_list -> variable var_list .)
    ID              reduce using rule 11 (var_list -> variable var_list .)
    READ            reduce using rule 11 (var_list -> variable var_list .)
    WRITE           reduce using rule 11 (var_list -> variable var_list .)
    WHEN            reduce using rule 11 (var_list -> variable var_list .)
    WHILE           reduce using rule 11 (var_list -> variable var_list .)


state 17

    (13) func_list -> func func_list .

    MAIN            reduce using rule 13 (func_list -> func func_list .)


state 18

    (8) cuerpo -> MAIN context_to_global . OPPARENTH CLPARENTH OPBRACE estat_list calcula_globales CLBRACE

    OPPARENTH       shift and go to state 22


state 19

    (9) variable -> VAR ID . COLON var_typ
    (10) variable -> VAR ID . COLON var_typ dims

    COLON           shift and go to state 23


state 20

    (23) func -> FUNC ID . context_to_local OPPARENTH CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE
    (24) func -> FUNC ID . context_to_local OPPARENTH param_list CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE
    (25) context_to_local -> .

    OPPARENTH       reduce using rule 25 (context_to_local -> .)

    context_to_local               shift and go to state 24

state 21

    (1) program -> encabezamiento var_list func_list cuerpo .

    $end            reduce using rule 1 (program -> encabezamiento var_list func_list cuerpo .)


state 22

    (8) cuerpo -> MAIN context_to_global OPPARENTH . CLPARENTH OPBRACE estat_list calcula_globales CLBRACE

    CLPARENTH       shift and go to state 25


state 23

    (9) variable -> VAR ID COLON . var_typ
    (10) variable -> VAR ID COLON . var_typ dims
    (50) var_typ -> . INT
    (51) var_typ -> . FLOAT
    (52) var_typ -> . CHAR
    (53) var_typ -> . BOOL
    (54) var_typ -> . FRAME

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 29
    BOOL            shift and go to state 30
    FRAME           shift and go to state 31

    var_typ                        shift and go to state 26

state 24

    (23) func -> FUNC ID context_to_local . OPPARENTH CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE
    (24) func -> FUNC ID context_to_local . OPPARENTH param_list CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE

    OPPARENTH       shift and go to state 32


state 25

    (8) cuerpo -> MAIN context_to_global OPPARENTH CLPARENTH . OPBRACE estat_list calcula_globales CLBRACE

    OPBRACE         shift and go to state 33


state 26

    (9) variable -> VAR ID COLON var_typ .
    (10) variable -> VAR ID COLON var_typ . dims
    (20) dims -> . OPBRACKET aritm save_array_size CLBRACKET
    (21) dims -> . OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET

    VAR             reduce using rule 9 (variable -> VAR ID COLON var_typ .)
    MAIN            reduce using rule 9 (variable -> VAR ID COLON var_typ .)
    FUNC            reduce using rule 9 (variable -> VAR ID COLON var_typ .)
    ID              reduce using rule 9 (variable -> VAR ID COLON var_typ .)
    READ            reduce using rule 9 (variable -> VAR ID COLON var_typ .)
    WRITE           reduce using rule 9 (variable -> VAR ID COLON var_typ .)
    WHEN            reduce using rule 9 (variable -> VAR ID COLON var_typ .)
    WHILE           reduce using rule 9 (variable -> VAR ID COLON var_typ .)
    OPBRACKET       shift and go to state 35

    dims                           shift and go to state 34

state 27

    (50) var_typ -> INT .

    OPBRACKET       reduce using rule 50 (var_typ -> INT .)
    VAR             reduce using rule 50 (var_typ -> INT .)
    MAIN            reduce using rule 50 (var_typ -> INT .)
    FUNC            reduce using rule 50 (var_typ -> INT .)
    ID              reduce using rule 50 (var_typ -> INT .)
    READ            reduce using rule 50 (var_typ -> INT .)
    WRITE           reduce using rule 50 (var_typ -> INT .)
    WHEN            reduce using rule 50 (var_typ -> INT .)
    WHILE           reduce using rule 50 (var_typ -> INT .)
    COMMA           reduce using rule 50 (var_typ -> INT .)
    CLPARENTH       reduce using rule 50 (var_typ -> INT .)


state 28

    (51) var_typ -> FLOAT .

    OPBRACKET       reduce using rule 51 (var_typ -> FLOAT .)
    VAR             reduce using rule 51 (var_typ -> FLOAT .)
    MAIN            reduce using rule 51 (var_typ -> FLOAT .)
    FUNC            reduce using rule 51 (var_typ -> FLOAT .)
    ID              reduce using rule 51 (var_typ -> FLOAT .)
    READ            reduce using rule 51 (var_typ -> FLOAT .)
    WRITE           reduce using rule 51 (var_typ -> FLOAT .)
    WHEN            reduce using rule 51 (var_typ -> FLOAT .)
    WHILE           reduce using rule 51 (var_typ -> FLOAT .)
    COMMA           reduce using rule 51 (var_typ -> FLOAT .)
    CLPARENTH       reduce using rule 51 (var_typ -> FLOAT .)


state 29

    (52) var_typ -> CHAR .

    OPBRACKET       reduce using rule 52 (var_typ -> CHAR .)
    VAR             reduce using rule 52 (var_typ -> CHAR .)
    MAIN            reduce using rule 52 (var_typ -> CHAR .)
    FUNC            reduce using rule 52 (var_typ -> CHAR .)
    ID              reduce using rule 52 (var_typ -> CHAR .)
    READ            reduce using rule 52 (var_typ -> CHAR .)
    WRITE           reduce using rule 52 (var_typ -> CHAR .)
    WHEN            reduce using rule 52 (var_typ -> CHAR .)
    WHILE           reduce using rule 52 (var_typ -> CHAR .)
    COMMA           reduce using rule 52 (var_typ -> CHAR .)
    CLPARENTH       reduce using rule 52 (var_typ -> CHAR .)


state 30

    (53) var_typ -> BOOL .

    OPBRACKET       reduce using rule 53 (var_typ -> BOOL .)
    VAR             reduce using rule 53 (var_typ -> BOOL .)
    MAIN            reduce using rule 53 (var_typ -> BOOL .)
    FUNC            reduce using rule 53 (var_typ -> BOOL .)
    ID              reduce using rule 53 (var_typ -> BOOL .)
    READ            reduce using rule 53 (var_typ -> BOOL .)
    WRITE           reduce using rule 53 (var_typ -> BOOL .)
    WHEN            reduce using rule 53 (var_typ -> BOOL .)
    WHILE           reduce using rule 53 (var_typ -> BOOL .)
    COMMA           reduce using rule 53 (var_typ -> BOOL .)
    CLPARENTH       reduce using rule 53 (var_typ -> BOOL .)


state 31

    (54) var_typ -> FRAME .

    OPBRACKET       reduce using rule 54 (var_typ -> FRAME .)
    VAR             reduce using rule 54 (var_typ -> FRAME .)
    MAIN            reduce using rule 54 (var_typ -> FRAME .)
    FUNC            reduce using rule 54 (var_typ -> FRAME .)
    ID              reduce using rule 54 (var_typ -> FRAME .)
    READ            reduce using rule 54 (var_typ -> FRAME .)
    WRITE           reduce using rule 54 (var_typ -> FRAME .)
    WHEN            reduce using rule 54 (var_typ -> FRAME .)
    WHILE           reduce using rule 54 (var_typ -> FRAME .)
    COMMA           reduce using rule 54 (var_typ -> FRAME .)
    CLPARENTH       reduce using rule 54 (var_typ -> FRAME .)


state 32

    (23) func -> FUNC ID context_to_local OPPARENTH . CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE
    (24) func -> FUNC ID context_to_local OPPARENTH . param_list CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE
    (17) param_list -> . param COMMA param_list
    (18) param_list -> . param
    (48) param -> . ID COLON var_typ
    (49) param -> . ID COLON var_typ dims

    CLPARENTH       shift and go to state 37
    ID              shift and go to state 36

    param_list                     shift and go to state 38
    param                          shift and go to state 39

state 33

    (8) cuerpo -> MAIN context_to_global OPPARENTH CLPARENTH OPBRACE . estat_list calcula_globales CLBRACE
    (15) estat_list -> . estat estat_list
    (16) estat_list -> . estat
    (39) estat -> . asign
    (40) estat -> . llam_void
    (41) estat -> . lectura
    (42) estat -> . escritura
    (43) estat -> . carga_dt
    (44) estat -> . decision
    (45) estat -> . ciclo
    (101) asign -> . ID ASGNMNT lectura
    (102) asign -> . ID ASGNMNT aritm
    (103) asign -> . ID ASGNMNT CONST_STRING
    (104) asign -> . ID dims ASGNMNT lectura
    (105) asign -> . ID dims ASGNMNT aritm
    (106) asign -> . ID dims ASGNMNT CONST_STRING
    (99) llam_void -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (100) llam_void -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (96) lectura -> . READ OPPARENTH CLPARENTH
    (97) escritura -> . WRITE OPPARENTH aritm CLPARENTH
    (98) escritura -> . WRITE OPPARENTH CONST_STRING CLPARENTH
    (46) carga_dt -> . ID ASGNMNT LOAD OPPARENTH ID CLPARENTH
    (47) carga_dt -> . ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH
    (32) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2
    (33) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2
    (28) ciclo -> . WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2

    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    WHEN            shift and go to state 52
    WHILE           shift and go to state 53

    estat_list                     shift and go to state 40
    estat                          shift and go to state 41
    asign                          shift and go to state 42
    llam_void                      shift and go to state 43
    lectura                        shift and go to state 44
    escritura                      shift and go to state 45
    carga_dt                       shift and go to state 46
    decision                       shift and go to state 47
    ciclo                          shift and go to state 48

state 34

    (10) variable -> VAR ID COLON var_typ dims .

    VAR             reduce using rule 10 (variable -> VAR ID COLON var_typ dims .)
    MAIN            reduce using rule 10 (variable -> VAR ID COLON var_typ dims .)
    FUNC            reduce using rule 10 (variable -> VAR ID COLON var_typ dims .)
    ID              reduce using rule 10 (variable -> VAR ID COLON var_typ dims .)
    READ            reduce using rule 10 (variable -> VAR ID COLON var_typ dims .)
    WRITE           reduce using rule 10 (variable -> VAR ID COLON var_typ dims .)
    WHEN            reduce using rule 10 (variable -> VAR ID COLON var_typ dims .)
    WHILE           reduce using rule 10 (variable -> VAR ID COLON var_typ dims .)


state 35

    (20) dims -> OPBRACKET . aritm save_array_size CLBRACKET
    (21) dims -> OPBRACKET . aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    aritm                          shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 36

    (48) param -> ID . COLON var_typ
    (49) param -> ID . COLON var_typ dims

    COLON           shift and go to state 64


state 37

    (23) func -> FUNC ID context_to_local OPPARENTH CLPARENTH . COLON func_typ save_global_func OPBRACE func_cont CLBRACE

    COLON           shift and go to state 65


state 38

    (24) func -> FUNC ID context_to_local OPPARENTH param_list . CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE

    CLPARENTH       shift and go to state 66


state 39

    (17) param_list -> param . COMMA param_list
    (18) param_list -> param .

    COMMA           shift and go to state 67
    CLPARENTH       reduce using rule 18 (param_list -> param .)


state 40

    (8) cuerpo -> MAIN context_to_global OPPARENTH CLPARENTH OPBRACE estat_list . calcula_globales CLBRACE
    (5) calcula_globales -> .

    CLBRACE         reduce using rule 5 (calcula_globales -> .)

    calcula_globales               shift and go to state 68

state 41

    (15) estat_list -> estat . estat_list
    (16) estat_list -> estat .
    (15) estat_list -> . estat estat_list
    (16) estat_list -> . estat
    (39) estat -> . asign
    (40) estat -> . llam_void
    (41) estat -> . lectura
    (42) estat -> . escritura
    (43) estat -> . carga_dt
    (44) estat -> . decision
    (45) estat -> . ciclo
    (101) asign -> . ID ASGNMNT lectura
    (102) asign -> . ID ASGNMNT aritm
    (103) asign -> . ID ASGNMNT CONST_STRING
    (104) asign -> . ID dims ASGNMNT lectura
    (105) asign -> . ID dims ASGNMNT aritm
    (106) asign -> . ID dims ASGNMNT CONST_STRING
    (99) llam_void -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (100) llam_void -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (96) lectura -> . READ OPPARENTH CLPARENTH
    (97) escritura -> . WRITE OPPARENTH aritm CLPARENTH
    (98) escritura -> . WRITE OPPARENTH CONST_STRING CLPARENTH
    (46) carga_dt -> . ID ASGNMNT LOAD OPPARENTH ID CLPARENTH
    (47) carga_dt -> . ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH
    (32) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2
    (33) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2
    (28) ciclo -> . WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2

    CLBRACE         reduce using rule 16 (estat_list -> estat .)
    RETURN          reduce using rule 16 (estat_list -> estat .)
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    WHEN            shift and go to state 52
    WHILE           shift and go to state 53

    estat                          shift and go to state 41
    estat_list                     shift and go to state 69
    asign                          shift and go to state 42
    llam_void                      shift and go to state 43
    lectura                        shift and go to state 44
    escritura                      shift and go to state 45
    carga_dt                       shift and go to state 46
    decision                       shift and go to state 47
    ciclo                          shift and go to state 48

state 42

    (39) estat -> asign .

    ID              reduce using rule 39 (estat -> asign .)
    READ            reduce using rule 39 (estat -> asign .)
    WRITE           reduce using rule 39 (estat -> asign .)
    WHEN            reduce using rule 39 (estat -> asign .)
    WHILE           reduce using rule 39 (estat -> asign .)
    CLBRACE         reduce using rule 39 (estat -> asign .)
    RETURN          reduce using rule 39 (estat -> asign .)


state 43

    (40) estat -> llam_void .

    ID              reduce using rule 40 (estat -> llam_void .)
    READ            reduce using rule 40 (estat -> llam_void .)
    WRITE           reduce using rule 40 (estat -> llam_void .)
    WHEN            reduce using rule 40 (estat -> llam_void .)
    WHILE           reduce using rule 40 (estat -> llam_void .)
    CLBRACE         reduce using rule 40 (estat -> llam_void .)
    RETURN          reduce using rule 40 (estat -> llam_void .)


state 44

    (41) estat -> lectura .

    ID              reduce using rule 41 (estat -> lectura .)
    READ            reduce using rule 41 (estat -> lectura .)
    WRITE           reduce using rule 41 (estat -> lectura .)
    WHEN            reduce using rule 41 (estat -> lectura .)
    WHILE           reduce using rule 41 (estat -> lectura .)
    CLBRACE         reduce using rule 41 (estat -> lectura .)
    RETURN          reduce using rule 41 (estat -> lectura .)


state 45

    (42) estat -> escritura .

    ID              reduce using rule 42 (estat -> escritura .)
    READ            reduce using rule 42 (estat -> escritura .)
    WRITE           reduce using rule 42 (estat -> escritura .)
    WHEN            reduce using rule 42 (estat -> escritura .)
    WHILE           reduce using rule 42 (estat -> escritura .)
    CLBRACE         reduce using rule 42 (estat -> escritura .)
    RETURN          reduce using rule 42 (estat -> escritura .)


state 46

    (43) estat -> carga_dt .

    ID              reduce using rule 43 (estat -> carga_dt .)
    READ            reduce using rule 43 (estat -> carga_dt .)
    WRITE           reduce using rule 43 (estat -> carga_dt .)
    WHEN            reduce using rule 43 (estat -> carga_dt .)
    WHILE           reduce using rule 43 (estat -> carga_dt .)
    CLBRACE         reduce using rule 43 (estat -> carga_dt .)
    RETURN          reduce using rule 43 (estat -> carga_dt .)


state 47

    (44) estat -> decision .

    ID              reduce using rule 44 (estat -> decision .)
    READ            reduce using rule 44 (estat -> decision .)
    WRITE           reduce using rule 44 (estat -> decision .)
    WHEN            reduce using rule 44 (estat -> decision .)
    WHILE           reduce using rule 44 (estat -> decision .)
    CLBRACE         reduce using rule 44 (estat -> decision .)
    RETURN          reduce using rule 44 (estat -> decision .)


state 48

    (45) estat -> ciclo .

    ID              reduce using rule 45 (estat -> ciclo .)
    READ            reduce using rule 45 (estat -> ciclo .)
    WRITE           reduce using rule 45 (estat -> ciclo .)
    WHEN            reduce using rule 45 (estat -> ciclo .)
    WHILE           reduce using rule 45 (estat -> ciclo .)
    CLBRACE         reduce using rule 45 (estat -> ciclo .)
    RETURN          reduce using rule 45 (estat -> ciclo .)


state 49

    (101) asign -> ID . ASGNMNT lectura
    (102) asign -> ID . ASGNMNT aritm
    (103) asign -> ID . ASGNMNT CONST_STRING
    (104) asign -> ID . dims ASGNMNT lectura
    (105) asign -> ID . dims ASGNMNT aritm
    (106) asign -> ID . dims ASGNMNT CONST_STRING
    (99) llam_void -> ID . OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (100) llam_void -> ID . OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (46) carga_dt -> ID . ASGNMNT LOAD OPPARENTH ID CLPARENTH
    (47) carga_dt -> ID . ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH
    (20) dims -> . OPBRACKET aritm save_array_size CLBRACKET
    (21) dims -> . OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET

    ASGNMNT         shift and go to state 70
    OPPARENTH       shift and go to state 72
    OPBRACKET       shift and go to state 35

    dims                           shift and go to state 71

state 50

    (96) lectura -> READ . OPPARENTH CLPARENTH

    OPPARENTH       shift and go to state 73


state 51

    (97) escritura -> WRITE . OPPARENTH aritm CLPARENTH
    (98) escritura -> WRITE . OPPARENTH CONST_STRING CLPARENTH

    OPPARENTH       shift and go to state 74


state 52

    (32) decision -> WHEN . OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2
    (33) decision -> WHEN . OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2

    OPPARENTH       shift and go to state 75


state 53

    (28) ciclo -> WHILE . ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2
    (26) ciclo_q1 -> .

    OPPARENTH       reduce using rule 26 (ciclo_q1 -> .)

    ciclo_q1                       shift and go to state 76

state 54

    (20) dims -> OPBRACKET aritm . save_array_size CLBRACKET
    (21) dims -> OPBRACKET aritm . save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET
    (19) save_array_size -> .

    CLBRACKET       reduce using rule 19 (save_array_size -> .)

    save_array_size                shift and go to state 77

state 55

    (63) aritm -> term . check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> term . check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> term . check_aritm
    (62) check_aritm -> .

    PLUS            reduce using rule 62 (check_aritm -> .)
    MINUS           reduce using rule 62 (check_aritm -> .)
    CLBRACKET       reduce using rule 62 (check_aritm -> .)
    ID              reduce using rule 62 (check_aritm -> .)
    READ            reduce using rule 62 (check_aritm -> .)
    WRITE           reduce using rule 62 (check_aritm -> .)
    WHEN            reduce using rule 62 (check_aritm -> .)
    WHILE           reduce using rule 62 (check_aritm -> .)
    CLBRACE         reduce using rule 62 (check_aritm -> .)
    RETURN          reduce using rule 62 (check_aritm -> .)
    CLPARENTH       reduce using rule 62 (check_aritm -> .)
    EQUAL           reduce using rule 62 (check_aritm -> .)
    UNEQUAL         reduce using rule 62 (check_aritm -> .)
    LESS            reduce using rule 62 (check_aritm -> .)
    LESSEQ          reduce using rule 62 (check_aritm -> .)
    GREATER         reduce using rule 62 (check_aritm -> .)
    GREATEREQ       reduce using rule 62 (check_aritm -> .)
    COMMA           reduce using rule 62 (check_aritm -> .)

    check_aritm                    shift and go to state 78

state 56

    (68) term -> factor . check_term TIMES check_term_operation term
    (69) term -> factor . check_term DIVIDE check_term_operation term
    (70) term -> factor . check_term
    (67) check_term -> .

    TIMES           reduce using rule 67 (check_term -> .)
    DIVIDE          reduce using rule 67 (check_term -> .)
    PLUS            reduce using rule 67 (check_term -> .)
    MINUS           reduce using rule 67 (check_term -> .)
    CLBRACKET       reduce using rule 67 (check_term -> .)
    ID              reduce using rule 67 (check_term -> .)
    READ            reduce using rule 67 (check_term -> .)
    WRITE           reduce using rule 67 (check_term -> .)
    WHEN            reduce using rule 67 (check_term -> .)
    WHILE           reduce using rule 67 (check_term -> .)
    CLBRACE         reduce using rule 67 (check_term -> .)
    RETURN          reduce using rule 67 (check_term -> .)
    CLPARENTH       reduce using rule 67 (check_term -> .)
    EQUAL           reduce using rule 67 (check_term -> .)
    UNEQUAL         reduce using rule 67 (check_term -> .)
    LESS            reduce using rule 67 (check_term -> .)
    LESSEQ          reduce using rule 67 (check_term -> .)
    GREATER         reduce using rule 67 (check_term -> .)
    GREATEREQ       reduce using rule 67 (check_term -> .)
    COMMA           reduce using rule 67 (check_term -> .)

    check_term                     shift and go to state 79

state 57

    (82) factor -> OPPARENTH . check_parenth aritm CLPARENTH check_parenth
    (81) check_parenth -> .

    OPPARENTH       reduce using rule 81 (check_parenth -> .)
    ID              reduce using rule 81 (check_parenth -> .)
    CONST_INT       reduce using rule 81 (check_parenth -> .)
    CONST_FLOAT     reduce using rule 81 (check_parenth -> .)

    check_parenth                  shift and go to state 80

state 58

    (83) factor -> factor_function_call .

    TIMES           reduce using rule 83 (factor -> factor_function_call .)
    DIVIDE          reduce using rule 83 (factor -> factor_function_call .)
    PLUS            reduce using rule 83 (factor -> factor_function_call .)
    MINUS           reduce using rule 83 (factor -> factor_function_call .)
    CLBRACKET       reduce using rule 83 (factor -> factor_function_call .)
    ID              reduce using rule 83 (factor -> factor_function_call .)
    READ            reduce using rule 83 (factor -> factor_function_call .)
    WRITE           reduce using rule 83 (factor -> factor_function_call .)
    WHEN            reduce using rule 83 (factor -> factor_function_call .)
    WHILE           reduce using rule 83 (factor -> factor_function_call .)
    CLBRACE         reduce using rule 83 (factor -> factor_function_call .)
    RETURN          reduce using rule 83 (factor -> factor_function_call .)
    CLPARENTH       reduce using rule 83 (factor -> factor_function_call .)
    EQUAL           reduce using rule 83 (factor -> factor_function_call .)
    UNEQUAL         reduce using rule 83 (factor -> factor_function_call .)
    LESS            reduce using rule 83 (factor -> factor_function_call .)
    LESSEQ          reduce using rule 83 (factor -> factor_function_call .)
    GREATER         reduce using rule 83 (factor -> factor_function_call .)
    GREATEREQ       reduce using rule 83 (factor -> factor_function_call .)
    COMMA           reduce using rule 83 (factor -> factor_function_call .)


state 59

    (84) factor -> factor_var .

    TIMES           reduce using rule 84 (factor -> factor_var .)
    DIVIDE          reduce using rule 84 (factor -> factor_var .)
    PLUS            reduce using rule 84 (factor -> factor_var .)
    MINUS           reduce using rule 84 (factor -> factor_var .)
    CLBRACKET       reduce using rule 84 (factor -> factor_var .)
    ID              reduce using rule 84 (factor -> factor_var .)
    READ            reduce using rule 84 (factor -> factor_var .)
    WRITE           reduce using rule 84 (factor -> factor_var .)
    WHEN            reduce using rule 84 (factor -> factor_var .)
    WHILE           reduce using rule 84 (factor -> factor_var .)
    CLBRACE         reduce using rule 84 (factor -> factor_var .)
    RETURN          reduce using rule 84 (factor -> factor_var .)
    CLPARENTH       reduce using rule 84 (factor -> factor_var .)
    EQUAL           reduce using rule 84 (factor -> factor_var .)
    UNEQUAL         reduce using rule 84 (factor -> factor_var .)
    LESS            reduce using rule 84 (factor -> factor_var .)
    LESSEQ          reduce using rule 84 (factor -> factor_var .)
    GREATER         reduce using rule 84 (factor -> factor_var .)
    GREATEREQ       reduce using rule 84 (factor -> factor_var .)
    COMMA           reduce using rule 84 (factor -> factor_var .)


state 60

    (85) factor -> factor_const .

    TIMES           reduce using rule 85 (factor -> factor_const .)
    DIVIDE          reduce using rule 85 (factor -> factor_const .)
    PLUS            reduce using rule 85 (factor -> factor_const .)
    MINUS           reduce using rule 85 (factor -> factor_const .)
    CLBRACKET       reduce using rule 85 (factor -> factor_const .)
    ID              reduce using rule 85 (factor -> factor_const .)
    READ            reduce using rule 85 (factor -> factor_const .)
    WRITE           reduce using rule 85 (factor -> factor_const .)
    WHEN            reduce using rule 85 (factor -> factor_const .)
    WHILE           reduce using rule 85 (factor -> factor_const .)
    CLBRACE         reduce using rule 85 (factor -> factor_const .)
    RETURN          reduce using rule 85 (factor -> factor_const .)
    CLPARENTH       reduce using rule 85 (factor -> factor_const .)
    EQUAL           reduce using rule 85 (factor -> factor_const .)
    UNEQUAL         reduce using rule 85 (factor -> factor_const .)
    LESS            reduce using rule 85 (factor -> factor_const .)
    LESSEQ          reduce using rule 85 (factor -> factor_const .)
    GREATER         reduce using rule 85 (factor -> factor_const .)
    GREATEREQ       reduce using rule 85 (factor -> factor_const .)
    COMMA           reduce using rule 85 (factor -> factor_const .)


state 61

    (79) factor_function_call -> ID . OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> ID . OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> ID .
    (76) factor_var -> ID . dims
    (20) dims -> . OPBRACKET aritm save_array_size CLBRACKET
    (21) dims -> . OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET

    OPPARENTH       shift and go to state 81
    TIMES           reduce using rule 75 (factor_var -> ID .)
    DIVIDE          reduce using rule 75 (factor_var -> ID .)
    PLUS            reduce using rule 75 (factor_var -> ID .)
    MINUS           reduce using rule 75 (factor_var -> ID .)
    CLBRACKET       reduce using rule 75 (factor_var -> ID .)
    ID              reduce using rule 75 (factor_var -> ID .)
    READ            reduce using rule 75 (factor_var -> ID .)
    WRITE           reduce using rule 75 (factor_var -> ID .)
    WHEN            reduce using rule 75 (factor_var -> ID .)
    WHILE           reduce using rule 75 (factor_var -> ID .)
    CLBRACE         reduce using rule 75 (factor_var -> ID .)
    RETURN          reduce using rule 75 (factor_var -> ID .)
    CLPARENTH       reduce using rule 75 (factor_var -> ID .)
    EQUAL           reduce using rule 75 (factor_var -> ID .)
    UNEQUAL         reduce using rule 75 (factor_var -> ID .)
    LESS            reduce using rule 75 (factor_var -> ID .)
    LESSEQ          reduce using rule 75 (factor_var -> ID .)
    GREATER         reduce using rule 75 (factor_var -> ID .)
    GREATEREQ       reduce using rule 75 (factor_var -> ID .)
    COMMA           reduce using rule 75 (factor_var -> ID .)
    OPBRACKET       shift and go to state 35

    dims                           shift and go to state 82

state 62

    (73) factor_const -> CONST_INT . factortype_const_int
    (71) factortype_const_int -> .

    TIMES           reduce using rule 71 (factortype_const_int -> .)
    DIVIDE          reduce using rule 71 (factortype_const_int -> .)
    PLUS            reduce using rule 71 (factortype_const_int -> .)
    MINUS           reduce using rule 71 (factortype_const_int -> .)
    CLBRACKET       reduce using rule 71 (factortype_const_int -> .)
    ID              reduce using rule 71 (factortype_const_int -> .)
    READ            reduce using rule 71 (factortype_const_int -> .)
    WRITE           reduce using rule 71 (factortype_const_int -> .)
    WHEN            reduce using rule 71 (factortype_const_int -> .)
    WHILE           reduce using rule 71 (factortype_const_int -> .)
    CLBRACE         reduce using rule 71 (factortype_const_int -> .)
    RETURN          reduce using rule 71 (factortype_const_int -> .)
    CLPARENTH       reduce using rule 71 (factortype_const_int -> .)
    EQUAL           reduce using rule 71 (factortype_const_int -> .)
    UNEQUAL         reduce using rule 71 (factortype_const_int -> .)
    LESS            reduce using rule 71 (factortype_const_int -> .)
    LESSEQ          reduce using rule 71 (factortype_const_int -> .)
    GREATER         reduce using rule 71 (factortype_const_int -> .)
    GREATEREQ       reduce using rule 71 (factortype_const_int -> .)
    COMMA           reduce using rule 71 (factortype_const_int -> .)

    factortype_const_int           shift and go to state 83

state 63

    (74) factor_const -> CONST_FLOAT . factortype_const_float
    (72) factortype_const_float -> .

    TIMES           reduce using rule 72 (factortype_const_float -> .)
    DIVIDE          reduce using rule 72 (factortype_const_float -> .)
    PLUS            reduce using rule 72 (factortype_const_float -> .)
    MINUS           reduce using rule 72 (factortype_const_float -> .)
    CLBRACKET       reduce using rule 72 (factortype_const_float -> .)
    ID              reduce using rule 72 (factortype_const_float -> .)
    READ            reduce using rule 72 (factortype_const_float -> .)
    WRITE           reduce using rule 72 (factortype_const_float -> .)
    WHEN            reduce using rule 72 (factortype_const_float -> .)
    WHILE           reduce using rule 72 (factortype_const_float -> .)
    CLBRACE         reduce using rule 72 (factortype_const_float -> .)
    RETURN          reduce using rule 72 (factortype_const_float -> .)
    CLPARENTH       reduce using rule 72 (factortype_const_float -> .)
    EQUAL           reduce using rule 72 (factortype_const_float -> .)
    UNEQUAL         reduce using rule 72 (factortype_const_float -> .)
    LESS            reduce using rule 72 (factortype_const_float -> .)
    LESSEQ          reduce using rule 72 (factortype_const_float -> .)
    GREATER         reduce using rule 72 (factortype_const_float -> .)
    GREATEREQ       reduce using rule 72 (factortype_const_float -> .)
    COMMA           reduce using rule 72 (factortype_const_float -> .)

    factortype_const_float         shift and go to state 84

state 64

    (48) param -> ID COLON . var_typ
    (49) param -> ID COLON . var_typ dims
    (50) var_typ -> . INT
    (51) var_typ -> . FLOAT
    (52) var_typ -> . CHAR
    (53) var_typ -> . BOOL
    (54) var_typ -> . FRAME

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 29
    BOOL            shift and go to state 30
    FRAME           shift and go to state 31

    var_typ                        shift and go to state 85

state 65

    (23) func -> FUNC ID context_to_local OPPARENTH CLPARENTH COLON . func_typ save_global_func OPBRACE func_cont CLBRACE
    (55) func_typ -> . INT
    (56) func_typ -> . FLOAT
    (57) func_typ -> . CHAR
    (58) func_typ -> . BOOL
    (59) func_typ -> . FRAME
    (60) func_typ -> . VOID

    INT             shift and go to state 87
    FLOAT           shift and go to state 88
    CHAR            shift and go to state 89
    BOOL            shift and go to state 90
    FRAME           shift and go to state 91
    VOID            shift and go to state 92

    func_typ                       shift and go to state 86

state 66

    (24) func -> FUNC ID context_to_local OPPARENTH param_list CLPARENTH . COLON func_typ save_global_func OPBRACE func_cont CLBRACE

    COLON           shift and go to state 93


state 67

    (17) param_list -> param COMMA . param_list
    (17) param_list -> . param COMMA param_list
    (18) param_list -> . param
    (48) param -> . ID COLON var_typ
    (49) param -> . ID COLON var_typ dims

    ID              shift and go to state 36

    param                          shift and go to state 39
    param_list                     shift and go to state 94

state 68

    (8) cuerpo -> MAIN context_to_global OPPARENTH CLPARENTH OPBRACE estat_list calcula_globales . CLBRACE

    CLBRACE         shift and go to state 95


state 69

    (15) estat_list -> estat estat_list .

    CLBRACE         reduce using rule 15 (estat_list -> estat estat_list .)
    RETURN          reduce using rule 15 (estat_list -> estat estat_list .)


state 70

    (101) asign -> ID ASGNMNT . lectura
    (102) asign -> ID ASGNMNT . aritm
    (103) asign -> ID ASGNMNT . CONST_STRING
    (46) carga_dt -> ID ASGNMNT . LOAD OPPARENTH ID CLPARENTH
    (47) carga_dt -> ID ASGNMNT . LOAD OPPARENTH CONST_STRING CLPARENTH
    (96) lectura -> . READ OPPARENTH CLPARENTH
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    CONST_STRING    shift and go to state 98
    LOAD            shift and go to state 99
    READ            shift and go to state 50
    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    lectura                        shift and go to state 96
    aritm                          shift and go to state 97
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 71

    (104) asign -> ID dims . ASGNMNT lectura
    (105) asign -> ID dims . ASGNMNT aritm
    (106) asign -> ID dims . ASGNMNT CONST_STRING

    ASGNMNT         shift and go to state 100


state 72

    (99) llam_void -> ID OPPARENTH . function_call_q1 CLPARENTH function_call_q2
    (100) llam_void -> ID OPPARENTH . function_call_q1 args CLPARENTH function_call_q2
    (77) function_call_q1 -> .

    CLPARENTH       reduce using rule 77 (function_call_q1 -> .)
    OPPARENTH       reduce using rule 77 (function_call_q1 -> .)
    ID              reduce using rule 77 (function_call_q1 -> .)
    CONST_INT       reduce using rule 77 (function_call_q1 -> .)
    CONST_FLOAT     reduce using rule 77 (function_call_q1 -> .)

    function_call_q1               shift and go to state 101

state 73

    (96) lectura -> READ OPPARENTH . CLPARENTH

    CLPARENTH       shift and go to state 102


state 74

    (97) escritura -> WRITE OPPARENTH . aritm CLPARENTH
    (98) escritura -> WRITE OPPARENTH . CONST_STRING CLPARENTH
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    CONST_STRING    shift and go to state 104
    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    aritm                          shift and go to state 103
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 75

    (32) decision -> WHEN OPPARENTH . relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2
    (33) decision -> WHEN OPPARENTH . relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2
    (86) relac -> . aritm EQUAL aritm
    (87) relac -> . aritm UNEQUAL aritm
    (88) relac -> . aritm LESS aritm
    (89) relac -> . aritm LESSEQ aritm
    (90) relac -> . aritm GREATER aritm
    (91) relac -> . aritm GREATEREQ aritm
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    relac                          shift and go to state 105
    aritm                          shift and go to state 106
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 76

    (28) ciclo -> WHILE ciclo_q1 . OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2

    OPPARENTH       shift and go to state 107


state 77

    (20) dims -> OPBRACKET aritm save_array_size . CLBRACKET
    (21) dims -> OPBRACKET aritm save_array_size . CLBRACKET OPBRACKET aritm save_array_size CLBRACKET

    CLBRACKET       shift and go to state 108


state 78

    (63) aritm -> term check_aritm . PLUS check_aritm_operation aritm
    (64) aritm -> term check_aritm . MINUS check_aritm_operation aritm
    (65) aritm -> term check_aritm .

    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    CLBRACKET       reduce using rule 65 (aritm -> term check_aritm .)
    ID              reduce using rule 65 (aritm -> term check_aritm .)
    READ            reduce using rule 65 (aritm -> term check_aritm .)
    WRITE           reduce using rule 65 (aritm -> term check_aritm .)
    WHEN            reduce using rule 65 (aritm -> term check_aritm .)
    WHILE           reduce using rule 65 (aritm -> term check_aritm .)
    CLBRACE         reduce using rule 65 (aritm -> term check_aritm .)
    RETURN          reduce using rule 65 (aritm -> term check_aritm .)
    CLPARENTH       reduce using rule 65 (aritm -> term check_aritm .)
    EQUAL           reduce using rule 65 (aritm -> term check_aritm .)
    UNEQUAL         reduce using rule 65 (aritm -> term check_aritm .)
    LESS            reduce using rule 65 (aritm -> term check_aritm .)
    LESSEQ          reduce using rule 65 (aritm -> term check_aritm .)
    GREATER         reduce using rule 65 (aritm -> term check_aritm .)
    GREATEREQ       reduce using rule 65 (aritm -> term check_aritm .)
    COMMA           reduce using rule 65 (aritm -> term check_aritm .)


state 79

    (68) term -> factor check_term . TIMES check_term_operation term
    (69) term -> factor check_term . DIVIDE check_term_operation term
    (70) term -> factor check_term .

    TIMES           shift and go to state 111
    DIVIDE          shift and go to state 112
    PLUS            reduce using rule 70 (term -> factor check_term .)
    MINUS           reduce using rule 70 (term -> factor check_term .)
    CLBRACKET       reduce using rule 70 (term -> factor check_term .)
    ID              reduce using rule 70 (term -> factor check_term .)
    READ            reduce using rule 70 (term -> factor check_term .)
    WRITE           reduce using rule 70 (term -> factor check_term .)
    WHEN            reduce using rule 70 (term -> factor check_term .)
    WHILE           reduce using rule 70 (term -> factor check_term .)
    CLBRACE         reduce using rule 70 (term -> factor check_term .)
    RETURN          reduce using rule 70 (term -> factor check_term .)
    CLPARENTH       reduce using rule 70 (term -> factor check_term .)
    EQUAL           reduce using rule 70 (term -> factor check_term .)
    UNEQUAL         reduce using rule 70 (term -> factor check_term .)
    LESS            reduce using rule 70 (term -> factor check_term .)
    LESSEQ          reduce using rule 70 (term -> factor check_term .)
    GREATER         reduce using rule 70 (term -> factor check_term .)
    GREATEREQ       reduce using rule 70 (term -> factor check_term .)
    COMMA           reduce using rule 70 (term -> factor check_term .)


state 80

    (82) factor -> OPPARENTH check_parenth . aritm CLPARENTH check_parenth
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    aritm                          shift and go to state 113
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 81

    (79) factor_function_call -> ID OPPARENTH . function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> ID OPPARENTH . function_call_q1 args CLPARENTH function_call_q2
    (77) function_call_q1 -> .

    CLPARENTH       reduce using rule 77 (function_call_q1 -> .)
    OPPARENTH       reduce using rule 77 (function_call_q1 -> .)
    ID              reduce using rule 77 (function_call_q1 -> .)
    CONST_INT       reduce using rule 77 (function_call_q1 -> .)
    CONST_FLOAT     reduce using rule 77 (function_call_q1 -> .)

    function_call_q1               shift and go to state 114

state 82

    (76) factor_var -> ID dims .

    TIMES           reduce using rule 76 (factor_var -> ID dims .)
    DIVIDE          reduce using rule 76 (factor_var -> ID dims .)
    PLUS            reduce using rule 76 (factor_var -> ID dims .)
    MINUS           reduce using rule 76 (factor_var -> ID dims .)
    CLBRACKET       reduce using rule 76 (factor_var -> ID dims .)
    ID              reduce using rule 76 (factor_var -> ID dims .)
    READ            reduce using rule 76 (factor_var -> ID dims .)
    WRITE           reduce using rule 76 (factor_var -> ID dims .)
    WHEN            reduce using rule 76 (factor_var -> ID dims .)
    WHILE           reduce using rule 76 (factor_var -> ID dims .)
    CLBRACE         reduce using rule 76 (factor_var -> ID dims .)
    RETURN          reduce using rule 76 (factor_var -> ID dims .)
    CLPARENTH       reduce using rule 76 (factor_var -> ID dims .)
    EQUAL           reduce using rule 76 (factor_var -> ID dims .)
    UNEQUAL         reduce using rule 76 (factor_var -> ID dims .)
    LESS            reduce using rule 76 (factor_var -> ID dims .)
    LESSEQ          reduce using rule 76 (factor_var -> ID dims .)
    GREATER         reduce using rule 76 (factor_var -> ID dims .)
    GREATEREQ       reduce using rule 76 (factor_var -> ID dims .)
    COMMA           reduce using rule 76 (factor_var -> ID dims .)


state 83

    (73) factor_const -> CONST_INT factortype_const_int .

    TIMES           reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    DIVIDE          reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    PLUS            reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    MINUS           reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    CLBRACKET       reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    ID              reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    READ            reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    WRITE           reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    WHEN            reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    WHILE           reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    CLBRACE         reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    RETURN          reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    CLPARENTH       reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    EQUAL           reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    UNEQUAL         reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    LESS            reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    LESSEQ          reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    GREATER         reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    GREATEREQ       reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)
    COMMA           reduce using rule 73 (factor_const -> CONST_INT factortype_const_int .)


state 84

    (74) factor_const -> CONST_FLOAT factortype_const_float .

    TIMES           reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    DIVIDE          reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    PLUS            reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    MINUS           reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    CLBRACKET       reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    ID              reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    READ            reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    WRITE           reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    WHEN            reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    WHILE           reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    CLBRACE         reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    RETURN          reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    CLPARENTH       reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    EQUAL           reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    UNEQUAL         reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    LESS            reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    LESSEQ          reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    GREATER         reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    GREATEREQ       reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)
    COMMA           reduce using rule 74 (factor_const -> CONST_FLOAT factortype_const_float .)


state 85

    (48) param -> ID COLON var_typ .
    (49) param -> ID COLON var_typ . dims
    (20) dims -> . OPBRACKET aritm save_array_size CLBRACKET
    (21) dims -> . OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET

    COMMA           reduce using rule 48 (param -> ID COLON var_typ .)
    CLPARENTH       reduce using rule 48 (param -> ID COLON var_typ .)
    OPBRACKET       shift and go to state 35

    dims                           shift and go to state 115

state 86

    (23) func -> FUNC ID context_to_local OPPARENTH CLPARENTH COLON func_typ . save_global_func OPBRACE func_cont CLBRACE
    (22) save_global_func -> .

    OPBRACE         reduce using rule 22 (save_global_func -> .)

    save_global_func               shift and go to state 116

state 87

    (55) func_typ -> INT .

    OPBRACE         reduce using rule 55 (func_typ -> INT .)


state 88

    (56) func_typ -> FLOAT .

    OPBRACE         reduce using rule 56 (func_typ -> FLOAT .)


state 89

    (57) func_typ -> CHAR .

    OPBRACE         reduce using rule 57 (func_typ -> CHAR .)


state 90

    (58) func_typ -> BOOL .

    OPBRACE         reduce using rule 58 (func_typ -> BOOL .)


state 91

    (59) func_typ -> FRAME .

    OPBRACE         reduce using rule 59 (func_typ -> FRAME .)


state 92

    (60) func_typ -> VOID .

    OPBRACE         reduce using rule 60 (func_typ -> VOID .)


state 93

    (24) func -> FUNC ID context_to_local OPPARENTH param_list CLPARENTH COLON . func_typ save_global_func OPBRACE func_cont CLBRACE
    (55) func_typ -> . INT
    (56) func_typ -> . FLOAT
    (57) func_typ -> . CHAR
    (58) func_typ -> . BOOL
    (59) func_typ -> . FRAME
    (60) func_typ -> . VOID

    INT             shift and go to state 87
    FLOAT           shift and go to state 88
    CHAR            shift and go to state 89
    BOOL            shift and go to state 90
    FRAME           shift and go to state 91
    VOID            shift and go to state 92

    func_typ                       shift and go to state 117

state 94

    (17) param_list -> param COMMA param_list .

    CLPARENTH       reduce using rule 17 (param_list -> param COMMA param_list .)


state 95

    (8) cuerpo -> MAIN context_to_global OPPARENTH CLPARENTH OPBRACE estat_list calcula_globales CLBRACE .

    $end            reduce using rule 8 (cuerpo -> MAIN context_to_global OPPARENTH CLPARENTH OPBRACE estat_list calcula_globales CLBRACE .)


state 96

    (101) asign -> ID ASGNMNT lectura .

    ID              reduce using rule 101 (asign -> ID ASGNMNT lectura .)
    READ            reduce using rule 101 (asign -> ID ASGNMNT lectura .)
    WRITE           reduce using rule 101 (asign -> ID ASGNMNT lectura .)
    WHEN            reduce using rule 101 (asign -> ID ASGNMNT lectura .)
    WHILE           reduce using rule 101 (asign -> ID ASGNMNT lectura .)
    CLBRACE         reduce using rule 101 (asign -> ID ASGNMNT lectura .)
    RETURN          reduce using rule 101 (asign -> ID ASGNMNT lectura .)


state 97

    (102) asign -> ID ASGNMNT aritm .

    ID              reduce using rule 102 (asign -> ID ASGNMNT aritm .)
    READ            reduce using rule 102 (asign -> ID ASGNMNT aritm .)
    WRITE           reduce using rule 102 (asign -> ID ASGNMNT aritm .)
    WHEN            reduce using rule 102 (asign -> ID ASGNMNT aritm .)
    WHILE           reduce using rule 102 (asign -> ID ASGNMNT aritm .)
    CLBRACE         reduce using rule 102 (asign -> ID ASGNMNT aritm .)
    RETURN          reduce using rule 102 (asign -> ID ASGNMNT aritm .)


state 98

    (103) asign -> ID ASGNMNT CONST_STRING .

    ID              reduce using rule 103 (asign -> ID ASGNMNT CONST_STRING .)
    READ            reduce using rule 103 (asign -> ID ASGNMNT CONST_STRING .)
    WRITE           reduce using rule 103 (asign -> ID ASGNMNT CONST_STRING .)
    WHEN            reduce using rule 103 (asign -> ID ASGNMNT CONST_STRING .)
    WHILE           reduce using rule 103 (asign -> ID ASGNMNT CONST_STRING .)
    CLBRACE         reduce using rule 103 (asign -> ID ASGNMNT CONST_STRING .)
    RETURN          reduce using rule 103 (asign -> ID ASGNMNT CONST_STRING .)


state 99

    (46) carga_dt -> ID ASGNMNT LOAD . OPPARENTH ID CLPARENTH
    (47) carga_dt -> ID ASGNMNT LOAD . OPPARENTH CONST_STRING CLPARENTH

    OPPARENTH       shift and go to state 118


state 100

    (104) asign -> ID dims ASGNMNT . lectura
    (105) asign -> ID dims ASGNMNT . aritm
    (106) asign -> ID dims ASGNMNT . CONST_STRING
    (96) lectura -> . READ OPPARENTH CLPARENTH
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    CONST_STRING    shift and go to state 121
    READ            shift and go to state 50
    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    lectura                        shift and go to state 119
    aritm                          shift and go to state 120
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 101

    (99) llam_void -> ID OPPARENTH function_call_q1 . CLPARENTH function_call_q2
    (100) llam_void -> ID OPPARENTH function_call_q1 . args CLPARENTH function_call_q2
    (94) args -> . aritm arg_q1 COMMA arg_q2 args
    (95) args -> . aritm arg_q1
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    CLPARENTH       shift and go to state 122
    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    args                           shift and go to state 123
    aritm                          shift and go to state 124
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 102

    (96) lectura -> READ OPPARENTH CLPARENTH .

    ID              reduce using rule 96 (lectura -> READ OPPARENTH CLPARENTH .)
    READ            reduce using rule 96 (lectura -> READ OPPARENTH CLPARENTH .)
    WRITE           reduce using rule 96 (lectura -> READ OPPARENTH CLPARENTH .)
    WHEN            reduce using rule 96 (lectura -> READ OPPARENTH CLPARENTH .)
    WHILE           reduce using rule 96 (lectura -> READ OPPARENTH CLPARENTH .)
    CLBRACE         reduce using rule 96 (lectura -> READ OPPARENTH CLPARENTH .)
    RETURN          reduce using rule 96 (lectura -> READ OPPARENTH CLPARENTH .)


state 103

    (97) escritura -> WRITE OPPARENTH aritm . CLPARENTH

    CLPARENTH       shift and go to state 125


state 104

    (98) escritura -> WRITE OPPARENTH CONST_STRING . CLPARENTH

    CLPARENTH       shift and go to state 126


state 105

    (32) decision -> WHEN OPPARENTH relac . conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2
    (33) decision -> WHEN OPPARENTH relac . conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2
    (29) conditional_q1 -> .

    CLPARENTH       reduce using rule 29 (conditional_q1 -> .)

    conditional_q1                 shift and go to state 127

state 106

    (86) relac -> aritm . EQUAL aritm
    (87) relac -> aritm . UNEQUAL aritm
    (88) relac -> aritm . LESS aritm
    (89) relac -> aritm . LESSEQ aritm
    (90) relac -> aritm . GREATER aritm
    (91) relac -> aritm . GREATEREQ aritm

    EQUAL           shift and go to state 128
    UNEQUAL         shift and go to state 129
    LESS            shift and go to state 130
    LESSEQ          shift and go to state 131
    GREATER         shift and go to state 132
    GREATEREQ       shift and go to state 133


state 107

    (28) ciclo -> WHILE ciclo_q1 OPPARENTH . relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2
    (86) relac -> . aritm EQUAL aritm
    (87) relac -> . aritm UNEQUAL aritm
    (88) relac -> . aritm LESS aritm
    (89) relac -> . aritm LESSEQ aritm
    (90) relac -> . aritm GREATER aritm
    (91) relac -> . aritm GREATEREQ aritm
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    relac                          shift and go to state 134
    aritm                          shift and go to state 106
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 108

    (20) dims -> OPBRACKET aritm save_array_size CLBRACKET .
    (21) dims -> OPBRACKET aritm save_array_size CLBRACKET . OPBRACKET aritm save_array_size CLBRACKET

    VAR             reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    MAIN            reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    FUNC            reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    ID              reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    READ            reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    WRITE           reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    WHEN            reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    WHILE           reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    ASGNMNT         reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    TIMES           reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    DIVIDE          reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    PLUS            reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    MINUS           reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    CLBRACKET       reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    CLBRACE         reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    RETURN          reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    CLPARENTH       reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    EQUAL           reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    UNEQUAL         reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    LESS            reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    LESSEQ          reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    GREATER         reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    GREATEREQ       reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    COMMA           reduce using rule 20 (dims -> OPBRACKET aritm save_array_size CLBRACKET .)
    OPBRACKET       shift and go to state 135


state 109

    (63) aritm -> term check_aritm PLUS . check_aritm_operation aritm
    (61) check_aritm_operation -> .

    OPPARENTH       reduce using rule 61 (check_aritm_operation -> .)
    ID              reduce using rule 61 (check_aritm_operation -> .)
    CONST_INT       reduce using rule 61 (check_aritm_operation -> .)
    CONST_FLOAT     reduce using rule 61 (check_aritm_operation -> .)

    check_aritm_operation          shift and go to state 136

state 110

    (64) aritm -> term check_aritm MINUS . check_aritm_operation aritm
    (61) check_aritm_operation -> .

    OPPARENTH       reduce using rule 61 (check_aritm_operation -> .)
    ID              reduce using rule 61 (check_aritm_operation -> .)
    CONST_INT       reduce using rule 61 (check_aritm_operation -> .)
    CONST_FLOAT     reduce using rule 61 (check_aritm_operation -> .)

    check_aritm_operation          shift and go to state 137

state 111

    (68) term -> factor check_term TIMES . check_term_operation term
    (66) check_term_operation -> .

    OPPARENTH       reduce using rule 66 (check_term_operation -> .)
    ID              reduce using rule 66 (check_term_operation -> .)
    CONST_INT       reduce using rule 66 (check_term_operation -> .)
    CONST_FLOAT     reduce using rule 66 (check_term_operation -> .)

    check_term_operation           shift and go to state 138

state 112

    (69) term -> factor check_term DIVIDE . check_term_operation term
    (66) check_term_operation -> .

    OPPARENTH       reduce using rule 66 (check_term_operation -> .)
    ID              reduce using rule 66 (check_term_operation -> .)
    CONST_INT       reduce using rule 66 (check_term_operation -> .)
    CONST_FLOAT     reduce using rule 66 (check_term_operation -> .)

    check_term_operation           shift and go to state 139

state 113

    (82) factor -> OPPARENTH check_parenth aritm . CLPARENTH check_parenth

    CLPARENTH       shift and go to state 140


state 114

    (79) factor_function_call -> ID OPPARENTH function_call_q1 . CLPARENTH function_call_q2
    (80) factor_function_call -> ID OPPARENTH function_call_q1 . args CLPARENTH function_call_q2
    (94) args -> . aritm arg_q1 COMMA arg_q2 args
    (95) args -> . aritm arg_q1
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    CLPARENTH       shift and go to state 141
    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    args                           shift and go to state 142
    aritm                          shift and go to state 124
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 115

    (49) param -> ID COLON var_typ dims .

    COMMA           reduce using rule 49 (param -> ID COLON var_typ dims .)
    CLPARENTH       reduce using rule 49 (param -> ID COLON var_typ dims .)


state 116

    (23) func -> FUNC ID context_to_local OPPARENTH CLPARENTH COLON func_typ save_global_func . OPBRACE func_cont CLBRACE

    OPBRACE         shift and go to state 143


state 117

    (24) func -> FUNC ID context_to_local OPPARENTH param_list CLPARENTH COLON func_typ . save_global_func OPBRACE func_cont CLBRACE
    (22) save_global_func -> .

    OPBRACE         reduce using rule 22 (save_global_func -> .)

    save_global_func               shift and go to state 144

state 118

    (46) carga_dt -> ID ASGNMNT LOAD OPPARENTH . ID CLPARENTH
    (47) carga_dt -> ID ASGNMNT LOAD OPPARENTH . CONST_STRING CLPARENTH

    ID              shift and go to state 145
    CONST_STRING    shift and go to state 146


state 119

    (104) asign -> ID dims ASGNMNT lectura .

    ID              reduce using rule 104 (asign -> ID dims ASGNMNT lectura .)
    READ            reduce using rule 104 (asign -> ID dims ASGNMNT lectura .)
    WRITE           reduce using rule 104 (asign -> ID dims ASGNMNT lectura .)
    WHEN            reduce using rule 104 (asign -> ID dims ASGNMNT lectura .)
    WHILE           reduce using rule 104 (asign -> ID dims ASGNMNT lectura .)
    CLBRACE         reduce using rule 104 (asign -> ID dims ASGNMNT lectura .)
    RETURN          reduce using rule 104 (asign -> ID dims ASGNMNT lectura .)


state 120

    (105) asign -> ID dims ASGNMNT aritm .

    ID              reduce using rule 105 (asign -> ID dims ASGNMNT aritm .)
    READ            reduce using rule 105 (asign -> ID dims ASGNMNT aritm .)
    WRITE           reduce using rule 105 (asign -> ID dims ASGNMNT aritm .)
    WHEN            reduce using rule 105 (asign -> ID dims ASGNMNT aritm .)
    WHILE           reduce using rule 105 (asign -> ID dims ASGNMNT aritm .)
    CLBRACE         reduce using rule 105 (asign -> ID dims ASGNMNT aritm .)
    RETURN          reduce using rule 105 (asign -> ID dims ASGNMNT aritm .)


state 121

    (106) asign -> ID dims ASGNMNT CONST_STRING .

    ID              reduce using rule 106 (asign -> ID dims ASGNMNT CONST_STRING .)
    READ            reduce using rule 106 (asign -> ID dims ASGNMNT CONST_STRING .)
    WRITE           reduce using rule 106 (asign -> ID dims ASGNMNT CONST_STRING .)
    WHEN            reduce using rule 106 (asign -> ID dims ASGNMNT CONST_STRING .)
    WHILE           reduce using rule 106 (asign -> ID dims ASGNMNT CONST_STRING .)
    CLBRACE         reduce using rule 106 (asign -> ID dims ASGNMNT CONST_STRING .)
    RETURN          reduce using rule 106 (asign -> ID dims ASGNMNT CONST_STRING .)


state 122

    (99) llam_void -> ID OPPARENTH function_call_q1 CLPARENTH . function_call_q2
    (78) function_call_q2 -> .

    ID              reduce using rule 78 (function_call_q2 -> .)
    READ            reduce using rule 78 (function_call_q2 -> .)
    WRITE           reduce using rule 78 (function_call_q2 -> .)
    WHEN            reduce using rule 78 (function_call_q2 -> .)
    WHILE           reduce using rule 78 (function_call_q2 -> .)
    CLBRACE         reduce using rule 78 (function_call_q2 -> .)
    RETURN          reduce using rule 78 (function_call_q2 -> .)

    function_call_q2               shift and go to state 147

state 123

    (100) llam_void -> ID OPPARENTH function_call_q1 args . CLPARENTH function_call_q2

    CLPARENTH       shift and go to state 148


state 124

    (94) args -> aritm . arg_q1 COMMA arg_q2 args
    (95) args -> aritm . arg_q1
    (92) arg_q1 -> .

    COMMA           reduce using rule 92 (arg_q1 -> .)
    CLPARENTH       reduce using rule 92 (arg_q1 -> .)

    arg_q1                         shift and go to state 149

state 125

    (97) escritura -> WRITE OPPARENTH aritm CLPARENTH .

    ID              reduce using rule 97 (escritura -> WRITE OPPARENTH aritm CLPARENTH .)
    READ            reduce using rule 97 (escritura -> WRITE OPPARENTH aritm CLPARENTH .)
    WRITE           reduce using rule 97 (escritura -> WRITE OPPARENTH aritm CLPARENTH .)
    WHEN            reduce using rule 97 (escritura -> WRITE OPPARENTH aritm CLPARENTH .)
    WHILE           reduce using rule 97 (escritura -> WRITE OPPARENTH aritm CLPARENTH .)
    CLBRACE         reduce using rule 97 (escritura -> WRITE OPPARENTH aritm CLPARENTH .)
    RETURN          reduce using rule 97 (escritura -> WRITE OPPARENTH aritm CLPARENTH .)


state 126

    (98) escritura -> WRITE OPPARENTH CONST_STRING CLPARENTH .

    ID              reduce using rule 98 (escritura -> WRITE OPPARENTH CONST_STRING CLPARENTH .)
    READ            reduce using rule 98 (escritura -> WRITE OPPARENTH CONST_STRING CLPARENTH .)
    WRITE           reduce using rule 98 (escritura -> WRITE OPPARENTH CONST_STRING CLPARENTH .)
    WHEN            reduce using rule 98 (escritura -> WRITE OPPARENTH CONST_STRING CLPARENTH .)
    WHILE           reduce using rule 98 (escritura -> WRITE OPPARENTH CONST_STRING CLPARENTH .)
    CLBRACE         reduce using rule 98 (escritura -> WRITE OPPARENTH CONST_STRING CLPARENTH .)
    RETURN          reduce using rule 98 (escritura -> WRITE OPPARENTH CONST_STRING CLPARENTH .)


state 127

    (32) decision -> WHEN OPPARENTH relac conditional_q1 . CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2
    (33) decision -> WHEN OPPARENTH relac conditional_q1 . CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2

    CLPARENTH       shift and go to state 150


state 128

    (86) relac -> aritm EQUAL . aritm
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    aritm                          shift and go to state 151
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 129

    (87) relac -> aritm UNEQUAL . aritm
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    aritm                          shift and go to state 152
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 130

    (88) relac -> aritm LESS . aritm
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    aritm                          shift and go to state 153
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 131

    (89) relac -> aritm LESSEQ . aritm
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    aritm                          shift and go to state 154
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 132

    (90) relac -> aritm GREATER . aritm
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    aritm                          shift and go to state 155
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 133

    (91) relac -> aritm GREATEREQ . aritm
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    aritm                          shift and go to state 156
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 134

    (28) ciclo -> WHILE ciclo_q1 OPPARENTH relac . conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2
    (29) conditional_q1 -> .

    CLPARENTH       reduce using rule 29 (conditional_q1 -> .)

    conditional_q1                 shift and go to state 157

state 135

    (21) dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET . aritm save_array_size CLBRACKET
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    aritm                          shift and go to state 158
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 136

    (63) aritm -> term check_aritm PLUS check_aritm_operation . aritm
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    term                           shift and go to state 55
    aritm                          shift and go to state 159
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 137

    (64) aritm -> term check_aritm MINUS check_aritm_operation . aritm
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    term                           shift and go to state 55
    aritm                          shift and go to state 160
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 138

    (68) term -> factor check_term TIMES check_term_operation . term
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    factor                         shift and go to state 56
    term                           shift and go to state 161
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 139

    (69) term -> factor check_term DIVIDE check_term_operation . term
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    factor                         shift and go to state 56
    term                           shift and go to state 162
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 140

    (82) factor -> OPPARENTH check_parenth aritm CLPARENTH . check_parenth
    (81) check_parenth -> .

    TIMES           reduce using rule 81 (check_parenth -> .)
    DIVIDE          reduce using rule 81 (check_parenth -> .)
    PLUS            reduce using rule 81 (check_parenth -> .)
    MINUS           reduce using rule 81 (check_parenth -> .)
    CLBRACKET       reduce using rule 81 (check_parenth -> .)
    ID              reduce using rule 81 (check_parenth -> .)
    READ            reduce using rule 81 (check_parenth -> .)
    WRITE           reduce using rule 81 (check_parenth -> .)
    WHEN            reduce using rule 81 (check_parenth -> .)
    WHILE           reduce using rule 81 (check_parenth -> .)
    CLBRACE         reduce using rule 81 (check_parenth -> .)
    RETURN          reduce using rule 81 (check_parenth -> .)
    CLPARENTH       reduce using rule 81 (check_parenth -> .)
    EQUAL           reduce using rule 81 (check_parenth -> .)
    UNEQUAL         reduce using rule 81 (check_parenth -> .)
    LESS            reduce using rule 81 (check_parenth -> .)
    LESSEQ          reduce using rule 81 (check_parenth -> .)
    GREATER         reduce using rule 81 (check_parenth -> .)
    GREATEREQ       reduce using rule 81 (check_parenth -> .)
    COMMA           reduce using rule 81 (check_parenth -> .)

    check_parenth                  shift and go to state 163

state 141

    (79) factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH . function_call_q2
    (78) function_call_q2 -> .

    TIMES           reduce using rule 78 (function_call_q2 -> .)
    DIVIDE          reduce using rule 78 (function_call_q2 -> .)
    PLUS            reduce using rule 78 (function_call_q2 -> .)
    MINUS           reduce using rule 78 (function_call_q2 -> .)
    CLBRACKET       reduce using rule 78 (function_call_q2 -> .)
    ID              reduce using rule 78 (function_call_q2 -> .)
    READ            reduce using rule 78 (function_call_q2 -> .)
    WRITE           reduce using rule 78 (function_call_q2 -> .)
    WHEN            reduce using rule 78 (function_call_q2 -> .)
    WHILE           reduce using rule 78 (function_call_q2 -> .)
    CLBRACE         reduce using rule 78 (function_call_q2 -> .)
    RETURN          reduce using rule 78 (function_call_q2 -> .)
    CLPARENTH       reduce using rule 78 (function_call_q2 -> .)
    EQUAL           reduce using rule 78 (function_call_q2 -> .)
    UNEQUAL         reduce using rule 78 (function_call_q2 -> .)
    LESS            reduce using rule 78 (function_call_q2 -> .)
    LESSEQ          reduce using rule 78 (function_call_q2 -> .)
    GREATER         reduce using rule 78 (function_call_q2 -> .)
    GREATEREQ       reduce using rule 78 (function_call_q2 -> .)
    COMMA           reduce using rule 78 (function_call_q2 -> .)

    function_call_q2               shift and go to state 164

state 142

    (80) factor_function_call -> ID OPPARENTH function_call_q1 args . CLPARENTH function_call_q2

    CLPARENTH       shift and go to state 165


state 143

    (23) func -> FUNC ID context_to_local OPPARENTH CLPARENTH COLON func_typ save_global_func OPBRACE . func_cont CLBRACE
    (35) func_cont -> . var_list estat_list RETURN aritm save_return_value
    (36) func_cont -> . estat_list RETURN aritm save_return_value
    (37) func_cont -> . var_list estat_list
    (38) func_cont -> . estat_list
    (11) var_list -> . variable var_list
    (12) var_list -> . variable
    (15) estat_list -> . estat estat_list
    (16) estat_list -> . estat
    (9) variable -> . VAR ID COLON var_typ
    (10) variable -> . VAR ID COLON var_typ dims
    (39) estat -> . asign
    (40) estat -> . llam_void
    (41) estat -> . lectura
    (42) estat -> . escritura
    (43) estat -> . carga_dt
    (44) estat -> . decision
    (45) estat -> . ciclo
    (101) asign -> . ID ASGNMNT lectura
    (102) asign -> . ID ASGNMNT aritm
    (103) asign -> . ID ASGNMNT CONST_STRING
    (104) asign -> . ID dims ASGNMNT lectura
    (105) asign -> . ID dims ASGNMNT aritm
    (106) asign -> . ID dims ASGNMNT CONST_STRING
    (99) llam_void -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (100) llam_void -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (96) lectura -> . READ OPPARENTH CLPARENTH
    (97) escritura -> . WRITE OPPARENTH aritm CLPARENTH
    (98) escritura -> . WRITE OPPARENTH CONST_STRING CLPARENTH
    (46) carga_dt -> . ID ASGNMNT LOAD OPPARENTH ID CLPARENTH
    (47) carga_dt -> . ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH
    (32) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2
    (33) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2
    (28) ciclo -> . WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2

    VAR             shift and go to state 10
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    WHEN            shift and go to state 52
    WHILE           shift and go to state 53

    func_cont                      shift and go to state 166
    var_list                       shift and go to state 167
    estat_list                     shift and go to state 168
    variable                       shift and go to state 7
    estat                          shift and go to state 41
    asign                          shift and go to state 42
    llam_void                      shift and go to state 43
    lectura                        shift and go to state 44
    escritura                      shift and go to state 45
    carga_dt                       shift and go to state 46
    decision                       shift and go to state 47
    ciclo                          shift and go to state 48

state 144

    (24) func -> FUNC ID context_to_local OPPARENTH param_list CLPARENTH COLON func_typ save_global_func . OPBRACE func_cont CLBRACE

    OPBRACE         shift and go to state 169


state 145

    (46) carga_dt -> ID ASGNMNT LOAD OPPARENTH ID . CLPARENTH

    CLPARENTH       shift and go to state 170


state 146

    (47) carga_dt -> ID ASGNMNT LOAD OPPARENTH CONST_STRING . CLPARENTH

    CLPARENTH       shift and go to state 171


state 147

    (99) llam_void -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .

    ID              reduce using rule 99 (llam_void -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    READ            reduce using rule 99 (llam_void -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    WRITE           reduce using rule 99 (llam_void -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    WHEN            reduce using rule 99 (llam_void -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    WHILE           reduce using rule 99 (llam_void -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    CLBRACE         reduce using rule 99 (llam_void -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    RETURN          reduce using rule 99 (llam_void -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)


state 148

    (100) llam_void -> ID OPPARENTH function_call_q1 args CLPARENTH . function_call_q2
    (78) function_call_q2 -> .

    ID              reduce using rule 78 (function_call_q2 -> .)
    READ            reduce using rule 78 (function_call_q2 -> .)
    WRITE           reduce using rule 78 (function_call_q2 -> .)
    WHEN            reduce using rule 78 (function_call_q2 -> .)
    WHILE           reduce using rule 78 (function_call_q2 -> .)
    CLBRACE         reduce using rule 78 (function_call_q2 -> .)
    RETURN          reduce using rule 78 (function_call_q2 -> .)

    function_call_q2               shift and go to state 172

state 149

    (94) args -> aritm arg_q1 . COMMA arg_q2 args
    (95) args -> aritm arg_q1 .

    COMMA           shift and go to state 173
    CLPARENTH       reduce using rule 95 (args -> aritm arg_q1 .)


state 150

    (32) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH . THEN OPBRACE estat_list CLBRACE conditional_q2
    (33) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH . THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2

    THEN            shift and go to state 174


state 151

    (86) relac -> aritm EQUAL aritm .

    CLPARENTH       reduce using rule 86 (relac -> aritm EQUAL aritm .)


state 152

    (87) relac -> aritm UNEQUAL aritm .

    CLPARENTH       reduce using rule 87 (relac -> aritm UNEQUAL aritm .)


state 153

    (88) relac -> aritm LESS aritm .

    CLPARENTH       reduce using rule 88 (relac -> aritm LESS aritm .)


state 154

    (89) relac -> aritm LESSEQ aritm .

    CLPARENTH       reduce using rule 89 (relac -> aritm LESSEQ aritm .)


state 155

    (90) relac -> aritm GREATER aritm .

    CLPARENTH       reduce using rule 90 (relac -> aritm GREATER aritm .)


state 156

    (91) relac -> aritm GREATEREQ aritm .

    CLPARENTH       reduce using rule 91 (relac -> aritm GREATEREQ aritm .)


state 157

    (28) ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 . CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2

    CLPARENTH       shift and go to state 175


state 158

    (21) dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm . save_array_size CLBRACKET
    (19) save_array_size -> .

    CLBRACKET       reduce using rule 19 (save_array_size -> .)

    save_array_size                shift and go to state 176

state 159

    (63) aritm -> term check_aritm PLUS check_aritm_operation aritm .

    CLBRACKET       reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    ID              reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    READ            reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    WRITE           reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    WHEN            reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    WHILE           reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    CLBRACE         reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    RETURN          reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    CLPARENTH       reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    EQUAL           reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    UNEQUAL         reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    LESS            reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    LESSEQ          reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    GREATER         reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    GREATEREQ       reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)
    COMMA           reduce using rule 63 (aritm -> term check_aritm PLUS check_aritm_operation aritm .)


state 160

    (64) aritm -> term check_aritm MINUS check_aritm_operation aritm .

    CLBRACKET       reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    ID              reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    READ            reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    WRITE           reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    WHEN            reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    WHILE           reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    CLBRACE         reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    RETURN          reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    CLPARENTH       reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    EQUAL           reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    UNEQUAL         reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    LESS            reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    LESSEQ          reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    GREATER         reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    GREATEREQ       reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)
    COMMA           reduce using rule 64 (aritm -> term check_aritm MINUS check_aritm_operation aritm .)


state 161

    (68) term -> factor check_term TIMES check_term_operation term .

    PLUS            reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    MINUS           reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    CLBRACKET       reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    ID              reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    READ            reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    WRITE           reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    WHEN            reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    WHILE           reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    CLBRACE         reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    RETURN          reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    CLPARENTH       reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    EQUAL           reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    UNEQUAL         reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    LESS            reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    LESSEQ          reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    GREATER         reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    GREATEREQ       reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)
    COMMA           reduce using rule 68 (term -> factor check_term TIMES check_term_operation term .)


state 162

    (69) term -> factor check_term DIVIDE check_term_operation term .

    PLUS            reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    MINUS           reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    CLBRACKET       reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    ID              reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    READ            reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    WRITE           reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    WHEN            reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    WHILE           reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    CLBRACE         reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    RETURN          reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    CLPARENTH       reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    EQUAL           reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    UNEQUAL         reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    LESS            reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    LESSEQ          reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    GREATER         reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    GREATEREQ       reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)
    COMMA           reduce using rule 69 (term -> factor check_term DIVIDE check_term_operation term .)


state 163

    (82) factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .

    TIMES           reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    DIVIDE          reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    PLUS            reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    MINUS           reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    CLBRACKET       reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    ID              reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    READ            reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    WRITE           reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    WHEN            reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    WHILE           reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    CLBRACE         reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    RETURN          reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    CLPARENTH       reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    EQUAL           reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    UNEQUAL         reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    LESS            reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    LESSEQ          reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    GREATER         reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    GREATEREQ       reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)
    COMMA           reduce using rule 82 (factor -> OPPARENTH check_parenth aritm CLPARENTH check_parenth .)


state 164

    (79) factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .

    TIMES           reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    DIVIDE          reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    PLUS            reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    MINUS           reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    CLBRACKET       reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    ID              reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    READ            reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    WRITE           reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    WHEN            reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    WHILE           reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    CLBRACE         reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    RETURN          reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    CLPARENTH       reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    EQUAL           reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    UNEQUAL         reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    LESS            reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    LESSEQ          reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    GREATER         reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    GREATEREQ       reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)
    COMMA           reduce using rule 79 (factor_function_call -> ID OPPARENTH function_call_q1 CLPARENTH function_call_q2 .)


state 165

    (80) factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH . function_call_q2
    (78) function_call_q2 -> .

    TIMES           reduce using rule 78 (function_call_q2 -> .)
    DIVIDE          reduce using rule 78 (function_call_q2 -> .)
    PLUS            reduce using rule 78 (function_call_q2 -> .)
    MINUS           reduce using rule 78 (function_call_q2 -> .)
    CLBRACKET       reduce using rule 78 (function_call_q2 -> .)
    ID              reduce using rule 78 (function_call_q2 -> .)
    READ            reduce using rule 78 (function_call_q2 -> .)
    WRITE           reduce using rule 78 (function_call_q2 -> .)
    WHEN            reduce using rule 78 (function_call_q2 -> .)
    WHILE           reduce using rule 78 (function_call_q2 -> .)
    CLBRACE         reduce using rule 78 (function_call_q2 -> .)
    RETURN          reduce using rule 78 (function_call_q2 -> .)
    CLPARENTH       reduce using rule 78 (function_call_q2 -> .)
    EQUAL           reduce using rule 78 (function_call_q2 -> .)
    UNEQUAL         reduce using rule 78 (function_call_q2 -> .)
    LESS            reduce using rule 78 (function_call_q2 -> .)
    LESSEQ          reduce using rule 78 (function_call_q2 -> .)
    GREATER         reduce using rule 78 (function_call_q2 -> .)
    GREATEREQ       reduce using rule 78 (function_call_q2 -> .)
    COMMA           reduce using rule 78 (function_call_q2 -> .)

    function_call_q2               shift and go to state 177

state 166

    (23) func -> FUNC ID context_to_local OPPARENTH CLPARENTH COLON func_typ save_global_func OPBRACE func_cont . CLBRACE

    CLBRACE         shift and go to state 178


state 167

    (35) func_cont -> var_list . estat_list RETURN aritm save_return_value
    (37) func_cont -> var_list . estat_list
    (15) estat_list -> . estat estat_list
    (16) estat_list -> . estat
    (39) estat -> . asign
    (40) estat -> . llam_void
    (41) estat -> . lectura
    (42) estat -> . escritura
    (43) estat -> . carga_dt
    (44) estat -> . decision
    (45) estat -> . ciclo
    (101) asign -> . ID ASGNMNT lectura
    (102) asign -> . ID ASGNMNT aritm
    (103) asign -> . ID ASGNMNT CONST_STRING
    (104) asign -> . ID dims ASGNMNT lectura
    (105) asign -> . ID dims ASGNMNT aritm
    (106) asign -> . ID dims ASGNMNT CONST_STRING
    (99) llam_void -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (100) llam_void -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (96) lectura -> . READ OPPARENTH CLPARENTH
    (97) escritura -> . WRITE OPPARENTH aritm CLPARENTH
    (98) escritura -> . WRITE OPPARENTH CONST_STRING CLPARENTH
    (46) carga_dt -> . ID ASGNMNT LOAD OPPARENTH ID CLPARENTH
    (47) carga_dt -> . ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH
    (32) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2
    (33) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2
    (28) ciclo -> . WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2

    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    WHEN            shift and go to state 52
    WHILE           shift and go to state 53

    estat_list                     shift and go to state 179
    estat                          shift and go to state 41
    asign                          shift and go to state 42
    llam_void                      shift and go to state 43
    lectura                        shift and go to state 44
    escritura                      shift and go to state 45
    carga_dt                       shift and go to state 46
    decision                       shift and go to state 47
    ciclo                          shift and go to state 48

state 168

    (36) func_cont -> estat_list . RETURN aritm save_return_value
    (38) func_cont -> estat_list .

    RETURN          shift and go to state 180
    CLBRACE         reduce using rule 38 (func_cont -> estat_list .)


state 169

    (24) func -> FUNC ID context_to_local OPPARENTH param_list CLPARENTH COLON func_typ save_global_func OPBRACE . func_cont CLBRACE
    (35) func_cont -> . var_list estat_list RETURN aritm save_return_value
    (36) func_cont -> . estat_list RETURN aritm save_return_value
    (37) func_cont -> . var_list estat_list
    (38) func_cont -> . estat_list
    (11) var_list -> . variable var_list
    (12) var_list -> . variable
    (15) estat_list -> . estat estat_list
    (16) estat_list -> . estat
    (9) variable -> . VAR ID COLON var_typ
    (10) variable -> . VAR ID COLON var_typ dims
    (39) estat -> . asign
    (40) estat -> . llam_void
    (41) estat -> . lectura
    (42) estat -> . escritura
    (43) estat -> . carga_dt
    (44) estat -> . decision
    (45) estat -> . ciclo
    (101) asign -> . ID ASGNMNT lectura
    (102) asign -> . ID ASGNMNT aritm
    (103) asign -> . ID ASGNMNT CONST_STRING
    (104) asign -> . ID dims ASGNMNT lectura
    (105) asign -> . ID dims ASGNMNT aritm
    (106) asign -> . ID dims ASGNMNT CONST_STRING
    (99) llam_void -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (100) llam_void -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (96) lectura -> . READ OPPARENTH CLPARENTH
    (97) escritura -> . WRITE OPPARENTH aritm CLPARENTH
    (98) escritura -> . WRITE OPPARENTH CONST_STRING CLPARENTH
    (46) carga_dt -> . ID ASGNMNT LOAD OPPARENTH ID CLPARENTH
    (47) carga_dt -> . ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH
    (32) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2
    (33) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2
    (28) ciclo -> . WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2

    VAR             shift and go to state 10
    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    WHEN            shift and go to state 52
    WHILE           shift and go to state 53

    func_cont                      shift and go to state 181
    var_list                       shift and go to state 167
    estat_list                     shift and go to state 168
    variable                       shift and go to state 7
    estat                          shift and go to state 41
    asign                          shift and go to state 42
    llam_void                      shift and go to state 43
    lectura                        shift and go to state 44
    escritura                      shift and go to state 45
    carga_dt                       shift and go to state 46
    decision                       shift and go to state 47
    ciclo                          shift and go to state 48

state 170

    (46) carga_dt -> ID ASGNMNT LOAD OPPARENTH ID CLPARENTH .

    ID              reduce using rule 46 (carga_dt -> ID ASGNMNT LOAD OPPARENTH ID CLPARENTH .)
    READ            reduce using rule 46 (carga_dt -> ID ASGNMNT LOAD OPPARENTH ID CLPARENTH .)
    WRITE           reduce using rule 46 (carga_dt -> ID ASGNMNT LOAD OPPARENTH ID CLPARENTH .)
    WHEN            reduce using rule 46 (carga_dt -> ID ASGNMNT LOAD OPPARENTH ID CLPARENTH .)
    WHILE           reduce using rule 46 (carga_dt -> ID ASGNMNT LOAD OPPARENTH ID CLPARENTH .)
    CLBRACE         reduce using rule 46 (carga_dt -> ID ASGNMNT LOAD OPPARENTH ID CLPARENTH .)
    RETURN          reduce using rule 46 (carga_dt -> ID ASGNMNT LOAD OPPARENTH ID CLPARENTH .)


state 171

    (47) carga_dt -> ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH .

    ID              reduce using rule 47 (carga_dt -> ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH .)
    READ            reduce using rule 47 (carga_dt -> ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH .)
    WRITE           reduce using rule 47 (carga_dt -> ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH .)
    WHEN            reduce using rule 47 (carga_dt -> ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH .)
    WHILE           reduce using rule 47 (carga_dt -> ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH .)
    CLBRACE         reduce using rule 47 (carga_dt -> ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH .)
    RETURN          reduce using rule 47 (carga_dt -> ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH .)


state 172

    (100) llam_void -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .

    ID              reduce using rule 100 (llam_void -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    READ            reduce using rule 100 (llam_void -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    WRITE           reduce using rule 100 (llam_void -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    WHEN            reduce using rule 100 (llam_void -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    WHILE           reduce using rule 100 (llam_void -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    CLBRACE         reduce using rule 100 (llam_void -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    RETURN          reduce using rule 100 (llam_void -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)


state 173

    (94) args -> aritm arg_q1 COMMA . arg_q2 args
    (93) arg_q2 -> .

    OPPARENTH       reduce using rule 93 (arg_q2 -> .)
    ID              reduce using rule 93 (arg_q2 -> .)
    CONST_INT       reduce using rule 93 (arg_q2 -> .)
    CONST_FLOAT     reduce using rule 93 (arg_q2 -> .)

    arg_q2                         shift and go to state 182

state 174

    (32) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN . OPBRACE estat_list CLBRACE conditional_q2
    (33) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN . OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2

    OPBRACE         shift and go to state 183


state 175

    (28) ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH . THEN OPBRACE estat_list CLBRACE ciclo_q2

    THEN            shift and go to state 184


state 176

    (21) dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size . CLBRACKET

    CLBRACKET       shift and go to state 185


state 177

    (80) factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .

    TIMES           reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    DIVIDE          reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    PLUS            reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    MINUS           reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    CLBRACKET       reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    ID              reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    READ            reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    WRITE           reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    WHEN            reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    WHILE           reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    CLBRACE         reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    RETURN          reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    CLPARENTH       reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    EQUAL           reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    UNEQUAL         reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    LESS            reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    LESSEQ          reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    GREATER         reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    GREATEREQ       reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)
    COMMA           reduce using rule 80 (factor_function_call -> ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2 .)


state 178

    (23) func -> FUNC ID context_to_local OPPARENTH CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE .

    FUNC            reduce using rule 23 (func -> FUNC ID context_to_local OPPARENTH CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE .)
    MAIN            reduce using rule 23 (func -> FUNC ID context_to_local OPPARENTH CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE .)


state 179

    (35) func_cont -> var_list estat_list . RETURN aritm save_return_value
    (37) func_cont -> var_list estat_list .

    RETURN          shift and go to state 186
    CLBRACE         reduce using rule 37 (func_cont -> var_list estat_list .)


state 180

    (36) func_cont -> estat_list RETURN . aritm save_return_value
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    aritm                          shift and go to state 187
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 181

    (24) func -> FUNC ID context_to_local OPPARENTH param_list CLPARENTH COLON func_typ save_global_func OPBRACE func_cont . CLBRACE

    CLBRACE         shift and go to state 188


state 182

    (94) args -> aritm arg_q1 COMMA arg_q2 . args
    (94) args -> . aritm arg_q1 COMMA arg_q2 args
    (95) args -> . aritm arg_q1
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    aritm                          shift and go to state 124
    args                           shift and go to state 189
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 183

    (32) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE . estat_list CLBRACE conditional_q2
    (33) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE . estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2
    (15) estat_list -> . estat estat_list
    (16) estat_list -> . estat
    (39) estat -> . asign
    (40) estat -> . llam_void
    (41) estat -> . lectura
    (42) estat -> . escritura
    (43) estat -> . carga_dt
    (44) estat -> . decision
    (45) estat -> . ciclo
    (101) asign -> . ID ASGNMNT lectura
    (102) asign -> . ID ASGNMNT aritm
    (103) asign -> . ID ASGNMNT CONST_STRING
    (104) asign -> . ID dims ASGNMNT lectura
    (105) asign -> . ID dims ASGNMNT aritm
    (106) asign -> . ID dims ASGNMNT CONST_STRING
    (99) llam_void -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (100) llam_void -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (96) lectura -> . READ OPPARENTH CLPARENTH
    (97) escritura -> . WRITE OPPARENTH aritm CLPARENTH
    (98) escritura -> . WRITE OPPARENTH CONST_STRING CLPARENTH
    (46) carga_dt -> . ID ASGNMNT LOAD OPPARENTH ID CLPARENTH
    (47) carga_dt -> . ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH
    (32) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2
    (33) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2
    (28) ciclo -> . WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2

    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    WHEN            shift and go to state 52
    WHILE           shift and go to state 53

    estat_list                     shift and go to state 190
    estat                          shift and go to state 41
    asign                          shift and go to state 42
    llam_void                      shift and go to state 43
    lectura                        shift and go to state 44
    escritura                      shift and go to state 45
    carga_dt                       shift and go to state 46
    decision                       shift and go to state 47
    ciclo                          shift and go to state 48

state 184

    (28) ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN . OPBRACE estat_list CLBRACE ciclo_q2

    OPBRACE         shift and go to state 191


state 185

    (21) dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .

    VAR             reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    MAIN            reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    FUNC            reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    ID              reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    READ            reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    WRITE           reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    WHEN            reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    WHILE           reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    ASGNMNT         reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    TIMES           reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    DIVIDE          reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    PLUS            reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    MINUS           reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    CLBRACKET       reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    CLBRACE         reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    RETURN          reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    CLPARENTH       reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    EQUAL           reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    UNEQUAL         reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    LESS            reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    LESSEQ          reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    GREATER         reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    GREATEREQ       reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)
    COMMA           reduce using rule 21 (dims -> OPBRACKET aritm save_array_size CLBRACKET OPBRACKET aritm save_array_size CLBRACKET .)


state 186

    (35) func_cont -> var_list estat_list RETURN . aritm save_return_value
    (63) aritm -> . term check_aritm PLUS check_aritm_operation aritm
    (64) aritm -> . term check_aritm MINUS check_aritm_operation aritm
    (65) aritm -> . term check_aritm
    (68) term -> . factor check_term TIMES check_term_operation term
    (69) term -> . factor check_term DIVIDE check_term_operation term
    (70) term -> . factor check_term
    (82) factor -> . OPPARENTH check_parenth aritm CLPARENTH check_parenth
    (83) factor -> . factor_function_call
    (84) factor -> . factor_var
    (85) factor -> . factor_const
    (79) factor_function_call -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (80) factor_function_call -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (75) factor_var -> . ID
    (76) factor_var -> . ID dims
    (73) factor_const -> . CONST_INT factortype_const_int
    (74) factor_const -> . CONST_FLOAT factortype_const_float

    OPPARENTH       shift and go to state 57
    ID              shift and go to state 61
    CONST_INT       shift and go to state 62
    CONST_FLOAT     shift and go to state 63

    aritm                          shift and go to state 192
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_function_call           shift and go to state 58
    factor_var                     shift and go to state 59
    factor_const                   shift and go to state 60

state 187

    (36) func_cont -> estat_list RETURN aritm . save_return_value
    (34) save_return_value -> .

    CLBRACE         reduce using rule 34 (save_return_value -> .)

    save_return_value              shift and go to state 193

state 188

    (24) func -> FUNC ID context_to_local OPPARENTH param_list CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE .

    FUNC            reduce using rule 24 (func -> FUNC ID context_to_local OPPARENTH param_list CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE .)
    MAIN            reduce using rule 24 (func -> FUNC ID context_to_local OPPARENTH param_list CLPARENTH COLON func_typ save_global_func OPBRACE func_cont CLBRACE .)


state 189

    (94) args -> aritm arg_q1 COMMA arg_q2 args .

    CLPARENTH       reduce using rule 94 (args -> aritm arg_q1 COMMA arg_q2 args .)


state 190

    (32) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list . CLBRACE conditional_q2
    (33) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list . CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2

    CLBRACE         shift and go to state 194


state 191

    (28) ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE . estat_list CLBRACE ciclo_q2
    (15) estat_list -> . estat estat_list
    (16) estat_list -> . estat
    (39) estat -> . asign
    (40) estat -> . llam_void
    (41) estat -> . lectura
    (42) estat -> . escritura
    (43) estat -> . carga_dt
    (44) estat -> . decision
    (45) estat -> . ciclo
    (101) asign -> . ID ASGNMNT lectura
    (102) asign -> . ID ASGNMNT aritm
    (103) asign -> . ID ASGNMNT CONST_STRING
    (104) asign -> . ID dims ASGNMNT lectura
    (105) asign -> . ID dims ASGNMNT aritm
    (106) asign -> . ID dims ASGNMNT CONST_STRING
    (99) llam_void -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (100) llam_void -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (96) lectura -> . READ OPPARENTH CLPARENTH
    (97) escritura -> . WRITE OPPARENTH aritm CLPARENTH
    (98) escritura -> . WRITE OPPARENTH CONST_STRING CLPARENTH
    (46) carga_dt -> . ID ASGNMNT LOAD OPPARENTH ID CLPARENTH
    (47) carga_dt -> . ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH
    (32) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2
    (33) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2
    (28) ciclo -> . WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2

    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    WHEN            shift and go to state 52
    WHILE           shift and go to state 53

    estat_list                     shift and go to state 195
    estat                          shift and go to state 41
    asign                          shift and go to state 42
    llam_void                      shift and go to state 43
    lectura                        shift and go to state 44
    escritura                      shift and go to state 45
    carga_dt                       shift and go to state 46
    decision                       shift and go to state 47
    ciclo                          shift and go to state 48

state 192

    (35) func_cont -> var_list estat_list RETURN aritm . save_return_value
    (34) save_return_value -> .

    CLBRACE         reduce using rule 34 (save_return_value -> .)

    save_return_value              shift and go to state 196

state 193

    (36) func_cont -> estat_list RETURN aritm save_return_value .

    CLBRACE         reduce using rule 36 (func_cont -> estat_list RETURN aritm save_return_value .)


state 194

    (32) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE . conditional_q2
    (33) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE . ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2
    (30) conditional_q2 -> .

    ELSE            shift and go to state 198
    ID              reduce using rule 30 (conditional_q2 -> .)
    READ            reduce using rule 30 (conditional_q2 -> .)
    WRITE           reduce using rule 30 (conditional_q2 -> .)
    WHEN            reduce using rule 30 (conditional_q2 -> .)
    WHILE           reduce using rule 30 (conditional_q2 -> .)
    CLBRACE         reduce using rule 30 (conditional_q2 -> .)
    RETURN          reduce using rule 30 (conditional_q2 -> .)

    conditional_q2                 shift and go to state 197

state 195

    (28) ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list . CLBRACE ciclo_q2

    CLBRACE         shift and go to state 199


state 196

    (35) func_cont -> var_list estat_list RETURN aritm save_return_value .

    CLBRACE         reduce using rule 35 (func_cont -> var_list estat_list RETURN aritm save_return_value .)


state 197

    (32) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2 .

    ID              reduce using rule 32 (decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2 .)
    READ            reduce using rule 32 (decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2 .)
    WRITE           reduce using rule 32 (decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2 .)
    WHEN            reduce using rule 32 (decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2 .)
    WHILE           reduce using rule 32 (decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2 .)
    CLBRACE         reduce using rule 32 (decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2 .)
    RETURN          reduce using rule 32 (decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2 .)


state 198

    (33) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE . conditional_q3 OPBRACE estat_list CLBRACE conditional_q2
    (31) conditional_q3 -> .

    OPBRACE         reduce using rule 31 (conditional_q3 -> .)

    conditional_q3                 shift and go to state 200

state 199

    (28) ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE . ciclo_q2
    (27) ciclo_q2 -> .

    ID              reduce using rule 27 (ciclo_q2 -> .)
    READ            reduce using rule 27 (ciclo_q2 -> .)
    WRITE           reduce using rule 27 (ciclo_q2 -> .)
    WHEN            reduce using rule 27 (ciclo_q2 -> .)
    WHILE           reduce using rule 27 (ciclo_q2 -> .)
    CLBRACE         reduce using rule 27 (ciclo_q2 -> .)
    RETURN          reduce using rule 27 (ciclo_q2 -> .)

    ciclo_q2                       shift and go to state 201

state 200

    (33) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 . OPBRACE estat_list CLBRACE conditional_q2

    OPBRACE         shift and go to state 202


state 201

    (28) ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2 .

    ID              reduce using rule 28 (ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2 .)
    READ            reduce using rule 28 (ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2 .)
    WRITE           reduce using rule 28 (ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2 .)
    WHEN            reduce using rule 28 (ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2 .)
    WHILE           reduce using rule 28 (ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2 .)
    CLBRACE         reduce using rule 28 (ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2 .)
    RETURN          reduce using rule 28 (ciclo -> WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2 .)


state 202

    (33) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE . estat_list CLBRACE conditional_q2
    (15) estat_list -> . estat estat_list
    (16) estat_list -> . estat
    (39) estat -> . asign
    (40) estat -> . llam_void
    (41) estat -> . lectura
    (42) estat -> . escritura
    (43) estat -> . carga_dt
    (44) estat -> . decision
    (45) estat -> . ciclo
    (101) asign -> . ID ASGNMNT lectura
    (102) asign -> . ID ASGNMNT aritm
    (103) asign -> . ID ASGNMNT CONST_STRING
    (104) asign -> . ID dims ASGNMNT lectura
    (105) asign -> . ID dims ASGNMNT aritm
    (106) asign -> . ID dims ASGNMNT CONST_STRING
    (99) llam_void -> . ID OPPARENTH function_call_q1 CLPARENTH function_call_q2
    (100) llam_void -> . ID OPPARENTH function_call_q1 args CLPARENTH function_call_q2
    (96) lectura -> . READ OPPARENTH CLPARENTH
    (97) escritura -> . WRITE OPPARENTH aritm CLPARENTH
    (98) escritura -> . WRITE OPPARENTH CONST_STRING CLPARENTH
    (46) carga_dt -> . ID ASGNMNT LOAD OPPARENTH ID CLPARENTH
    (47) carga_dt -> . ID ASGNMNT LOAD OPPARENTH CONST_STRING CLPARENTH
    (32) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE conditional_q2
    (33) decision -> . WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2
    (28) ciclo -> . WHILE ciclo_q1 OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ciclo_q2

    ID              shift and go to state 49
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    WHEN            shift and go to state 52
    WHILE           shift and go to state 53

    estat_list                     shift and go to state 203
    estat                          shift and go to state 41
    asign                          shift and go to state 42
    llam_void                      shift and go to state 43
    lectura                        shift and go to state 44
    escritura                      shift and go to state 45
    carga_dt                       shift and go to state 46
    decision                       shift and go to state 47
    ciclo                          shift and go to state 48

state 203

    (33) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list . CLBRACE conditional_q2

    CLBRACE         shift and go to state 204


state 204

    (33) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE . conditional_q2
    (30) conditional_q2 -> .

    ID              reduce using rule 30 (conditional_q2 -> .)
    READ            reduce using rule 30 (conditional_q2 -> .)
    WRITE           reduce using rule 30 (conditional_q2 -> .)
    WHEN            reduce using rule 30 (conditional_q2 -> .)
    WHILE           reduce using rule 30 (conditional_q2 -> .)
    CLBRACE         reduce using rule 30 (conditional_q2 -> .)
    RETURN          reduce using rule 30 (conditional_q2 -> .)

    conditional_q2                 shift and go to state 205

state 205

    (33) decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2 .

    ID              reduce using rule 33 (decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2 .)
    READ            reduce using rule 33 (decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2 .)
    WRITE           reduce using rule 33 (decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2 .)
    WHEN            reduce using rule 33 (decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2 .)
    WHILE           reduce using rule 33 (decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2 .)
    CLBRACE         reduce using rule 33 (decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2 .)
    RETURN          reduce using rule 33 (decision -> WHEN OPPARENTH relac conditional_q1 CLPARENTH THEN OPBRACE estat_list CLBRACE ELSE conditional_q3 OPBRACE estat_list CLBRACE conditional_q2 .)

